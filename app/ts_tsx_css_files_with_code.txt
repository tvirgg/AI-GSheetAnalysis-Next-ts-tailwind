File: globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {

}

@media (prefers-color-scheme: dark) {
  :root {

  }
}
html{
  scrollbar-gutter: stable;
}
body {
  background: #F9FAFB;
}

@layer utilities {
  /* .text-balance {
    text-wrap: balance;
  } */
}
/* styles/globals.css */

/* Импорт стилей Slick Carousel */
@import 'slick-carousel/slick/slick.css';
@import 'slick-carousel/slick/slick-theme.css';

/* Стилизация точек пагинации */
.my-slick-slider .slick-dots li button:before {
  color: #4B5563; /* Цвет точек */
}

.my-slick-slider .slick-dots li.slick-active button:before {
  color: #2563EB; /* Цвет активной точки */
}

/* Дополнительные стили для точек пагинации */
.my-slick-slider .slick-dots li button:before {
  font-size: 12px;
}
body::-webkit-scrollbar {
  width: 8px; /* Ширина скроллбара */
}

body::-webkit-scrollbar-thumb {
  border-radius: 100px; /* Закругленные углы */
  background-color: #b0b0b0; /* Серый цвет ползунка */
  border: 4px solid rgba(0, 0, 0, 0); /* Без внешнего бордюра */
}

body::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0.1); /* Цвет фона дорожки скроллбара */
}
/* Горизонтальный скроллбар для элемента с классом .scrollable-container */
.scrollable-container::-webkit-scrollbar {
  height: 18px; /* Высота горизонтального скроллбара */
}

.scrollable-container::-webkit-scrollbar-thumb {
  border-radius: 100px; /* Закругленные углы */
  background-color: #b0b0b0; /* Серый цвет ползунка */
  border: 4px solid rgba(0, 0, 0, 0); /* Без внешнего бордюра */
}

.scrollable-container::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0.1); /* Цвет фона дорожки скроллбара */
}

File: layout.tsx
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import { AuthProvider } from './context/AuthContext'
import 'slick-carousel/slick/slick.css'
import 'slick-carousel/slick/slick-theme.css'
const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        {/* AuthProvider wraps the entire application */}
        <AuthProvider>{children}</AuthProvider>
      </body>
    </html>
  )
}


File: page.tsx
export default function HomePage () {
  return (
    <>
      <div>
        Home page
      </div>
    </>
  )
}


File: config.ts
export const API_BASE_URL = 'https://45.66.10.64:443';

// для локалки:
// http://45.66.10.64:4555

// для vercel:
// https://45.66.10.64:443

File: AuthenticatedWrapper.tsx
// app/context/AuthContext.tsx
'use client'

import { createContext, useContext, useState, useEffect, ReactNode } from 'react'
import { useRouter } from 'next/navigation'

interface User {
  name: string
  email: string
  // Добавьте другие поля по необходимости
}

interface AuthContextType {
  token: string | null
  user: User | null
  login: (token: string, user: User) => void
  logout: () => void
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [token, setToken] = useState<string | null>(null)
  const [user, setUser] = useState<User | null>(null)
  const router = useRouter()

  useEffect(() => {
    const storedToken = localStorage.getItem('token')
    const storedUser = localStorage.getItem('user')
    if (storedToken) {
      setToken(storedToken)
    }
    if (storedUser) {
      setUser(JSON.parse(storedUser))
    }
  }, [])

  const loginUser = (newToken: string, userData: User) => {
    localStorage.setItem('token', newToken)
    localStorage.setItem('user', JSON.stringify(userData))
    setToken(newToken)
    setUser(userData)
    router.push('/dashboard/my') // Перенаправление после успешного входа
  }

  const logoutUser = () => {
    localStorage.removeItem('token')
    localStorage.removeItem('user')
    setToken(null)
    setUser(null)
    router.push('/signin') // Перенаправление на страницу входа после выхода
  }

  return (
    <AuthContext.Provider value={{ token, user, login: loginUser, logout: logoutUser }}>
      {children}
    </AuthContext.Provider>
  )
}

export const useAuth = () => {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}


File: ClientWrapper.tsx
// app/components/ClientWrapper.tsx
'use client'

import { AuthProvider } from '../app/context/AuthContext'
import ProtectedRoute from './ProtectedRoute'
import Navbar from './Navbar'
import Sidebar from './Sidebar'
import { useState } from 'react'

interface ClientWrapperProps {
  children: React.ReactNode
}

export default function ClientWrapper({ children }: ClientWrapperProps) {
  const [sidebarOpen, setSidebarOpen] = useState(false)

  return (
    <AuthProvider>
      <ProtectedRoute>
        <Navbar setSidebarOpen={setSidebarOpen} />
        <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />
        <main className="lg:pl-72">{children}</main>
      </ProtectedRoute>
    </AuthProvider>
  )
}


File: CustomArrows.tsx
// components/CustomArrows.tsx
'use client';

import { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/24/outline';

interface ArrowProps {
  className?: string;
  style?: React.CSSProperties;
  onClick?: () => void;
}

export const PrevArrow: React.FC<ArrowProps> = ({ className, style, onClick }) => (
  <button
    className={`absolute left-2 top-1/2 transform -translate-y-1/2 z-10 bg-white bg-opacity-75 hover:bg-opacity-100 p-2 rounded-full shadow ${className}`}
    style={{ ...style }}
    onClick={onClick}
    aria-label="Предыдущий"
  >
    <ChevronLeftIcon className="h-5 w-5 text-gray-700" />
  </button>
);

export const NextArrow: React.FC<ArrowProps> = ({ className, style, onClick }) => (
  <button
    className={`absolute right-2 top-1/2 transform -translate-y-1/2 z-10 bg-white bg-opacity-75 hover:bg-opacity-100 p-2 rounded-full shadow ${className}`}
    style={{ ...style }}
    onClick={onClick}
    aria-label="Следующий"
  >
    <ChevronRightIcon className="h-5 w-5 text-gray-700" />
  </button>
);


File: GraphRow.tsx
// components/GraphRow.tsx
'use client';

import {
  TrashIcon,
  CircleStackIcon,
  ArrowDownTrayIcon,
  WrenchScrewdriverIcon,
  PlusIcon,
} from '@heroicons/react/24/outline';
import { Dialog, Transition } from '@headlessui/react';
import { Fragment, useState } from 'react';
import "../app/globals.css"; // Импорт стилей

interface Graph {
  id: number;
  timestamp: number;
  prompt: string;
  graph_html: string; // base64
  is_up_to_date: boolean;
}

interface GraphRowProps {
  graphs: Graph[];
  tableName: string;
  handleDeleteGraph: (id: number, tableName: string) => void;
  handleRefreshGraph: (id: number, tableName: string) => void;
  handleAddMetric: (tableName: string) => void;
}

const GraphRow: React.FC<GraphRowProps> = ({
  graphs,
  tableName,
  handleDeleteGraph,
  handleRefreshGraph,
  handleAddMetric,
}) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalContent, setModalContent] = useState<string>('');

  const handleDownload = (graph: Graph) => {
    const blob = new Blob([atob(graph.graph_html)], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${graph.prompt}.html`;
    link.click();
    URL.revokeObjectURL(url);
  };

  const handleExpand = (graph: Graph) => {
    setModalContent(atob(graph.graph_html));
    setIsModalOpen(true);
  };

  return (
    <div className="relative mt-6 w-full">
      {/* Горизонтальная прокрутка с применением стилей скроллбара */}
      <div className="flex overflow-x-auto space-x-4 w-full scrollable-container">
        {graphs.map((graph) => (
          <div
            key={graph.id}
            className="flex-shrink-0 w-full max-w-xs sm:max-w-sm md:max-w-md lg:max-w-lg"
          >
            <div className="relative bg-white p-4 rounded-lg shadow h-[60vh] w-full overflow-hidden">
              {/* Кнопка удаления графика */}
              <button
                onClick={() => handleDeleteGraph(graph.id, tableName)}
                className="absolute top-2 right-2 text-red-500 hover:text-red-700"
                aria-label="Удалить график"
              >
                <TrashIcon className="h-5 w-5" />
              </button>

              {/* Кнопка обновления графика */}
              <button
                onClick={() => handleRefreshGraph(graph.id, tableName)}
                className="absolute top-2 left-2 text-indigo-500 hover:text-indigo-700"
                aria-label="Обновить график"
              >
                <CircleStackIcon className="h-5 w-5" />
              </button>

              {/* Кнопка скачивания графика */}
              <button
                onClick={() => handleDownload(graph)}
                className="absolute top-2 left-12 text-green-500 hover:text-green-700"
                aria-label="Скачать график"
              >
                <ArrowDownTrayIcon className="h-5 w-5" />
              </button>

              {/* Кнопка развернуть график на весь экран */}
              <button
                onClick={() => handleExpand(graph)}
                className="absolute top-2 left-24 text-blue-500 hover:text-blue-700"
                aria-label="Развернуть график"
              >
                <WrenchScrewdriverIcon className="h-5 w-5" />
              </button>

              {/* Отображение графика через iframe */}
              <iframe
                srcDoc={atob(graph.graph_html)}
                className="w-full h-full border-0 rounded-lg"
                title={graph.prompt}
                sandbox="allow-scripts allow-same-origin"
              />

              {/* Удалены элементы <p> с информацией о графике */}
            </div>
          </div>
        ))}

        {/* Кнопка добавления нового графика */}
        <div className="flex-shrink-0 w-full max-w-xs sm:max-w-sm md:max-w-md lg:max-w-lg">
          <div className="bg-white p-4 rounded-lg shadow flex items-center justify-center h-[60vh] w-full overflow-hidden">
            <button
              type="button"
              onClick={() => handleAddMetric(tableName)}
              className="flex flex-col items-center text-gray-500 hover:text-gray-700"
            >
              <PlusIcon aria-hidden="true" className="h-10 w-10" />
              <span className="mt-2">Добавить график</span>
            </button>
          </div>
        </div>
      </div>

      {/* Модальное окно для развертывания графика */}
      <Transition.Root show={isModalOpen} as={Fragment}>
        <Dialog as="div" className="relative z-50" onClose={setIsModalOpen}>
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
          </Transition.Child>

          <div className="fixed inset-0 z-50 overflow-y-auto">
            <div className="flex min-h-full items-center justify-center p-4 text-center">
              <Transition.Child
                as={Fragment}
                enter="ease-out duration-300"
                enterFrom="opacity-0 scale-95"
                enterTo="opacity-100 scale-100"
                leave="ease-in duration-200"
                leaveFrom="opacity-100 scale-100"
                leaveTo="opacity-0 scale-95"
              >
                <Dialog.Panel className="relative transform overflow-hidden rounded-lg bg-white px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-5xl sm:p-6">
                  <div className="absolute top-0 right-0 hidden pr-4 pt-4 sm:block">
                    <button
                      type="button"
                      className="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none"
                      onClick={() => setIsModalOpen(false)}
                    >
                      <span className="sr-only">Закрыть</span>
                      <svg
                        className="h-6 w-6"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        aria-hidden="true"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M6 18L18 6M6 6l12 12"
                        />
                      </svg>
                    </button>
                  </div>
                  <div className="mt-5 sm:mt-6">
                    <iframe
                      srcDoc={modalContent}
                      className="w-full h-[80vh] border-0 rounded-lg"
                      title="Развернутый график"
                      sandbox="allow-scripts allow-same-origin"
                    />
                  </div>
                </Dialog.Panel>
              </Transition.Child>
            </div>
          </div>
        </Dialog>
      </Transition.Root>
    </div>
  );
};

export default GraphRow;


File: Navbar.tsx
// app/components/Navbar.tsx
'use client'

import { useAuth } from '../app/context/AuthContext'
import { Menu, Transition } from '@headlessui/react'
import { Bars3Icon } from '@heroicons/react/24/outline'
import { ChevronDownIcon } from '@heroicons/react/20/solid'
import { Fragment } from 'react'
import classNames from 'classnames'

const userNavigation = [{ name: 'Настройки', href: '/dashboard/profile_settings' }]

export default function Navbar({ setSidebarOpen = (open: boolean) => {} }) {
  const { logout, user } = useAuth()

  const userName = user?.username || 'Пользователь' // Динамическое имя пользователя

  return (
    <div className="sticky top-0 z-40 flex h-16 shrink-0 items-center gap-x-4 border-b border-gray-200 bg-white px-4 shadow-sm sm:gap-x-6 sm:px-6 lg:px-8">
      {/* Кнопка для открытия бокового меню на мобильных устройствах */}
      <button
        type="button"
        onClick={() => setSidebarOpen(true)}
        className="-m-2.5 p-2.5 text-gray-700 lg:hidden"
      >
        <span className="sr-only">Открыть боковое меню</span>
        <Bars3Icon aria-hidden="true" className="h-6 w-6" />
      </button>

      {/* Разделитель, видимый только на мобильных устройствах */}
      <div aria-hidden="true" className="h-6 w-px bg-gray-900/10 lg:hidden" />

      <div className="flex flex-1 gap-x-4 self-stretch lg:gap-x-6">
        {/* Здесь можно добавить поиск или другие элементы */}
        <div className="flex-1" />
        <div className="flex items-center gap-x-4 lg:gap-x-6">
          {/* Выпадающее меню профиля */}
          <Menu as="div" className="relative">
            <div>
              <Menu.Button className="-m-1.5 flex items-center p-1.5">
                <span className="sr-only">Открыть меню пользователя</span>
                {/* Отображение имени пользователя */}
                <span className="flex items-center">
                  {/* На мобильных устройствах отображаем инициалы или сокращённое имя */}
                  <span className="block lg:hidden text-sm font-semibold text-gray-900">
                    {userName.charAt(0)}
                  </span>
                  {/* На больших экранах отображаем полное имя */}
                  <span className="hidden lg:block ml-4 text-sm font-semibold text-gray-900">
                    {userName}
                  </span>
                  <ChevronDownIcon aria-hidden="true" className="ml-2 h-5 w-5 text-gray-400" />
                </span>
              </Menu.Button>
            </div>

            {/* Меню, которое открывается при клике */}
            <Transition
              as={Fragment}
              enter="transition ease-out duration-100"
              enterFrom="transform opacity-0 scale-95"
              enterTo="transform opacity-100 scale-100"
              leave="transition ease-in duration-75"
              leaveFrom="transform opacity-100 scale-100"
              leaveTo="transform opacity-0 scale-95"
            >
              <Menu.Items className="absolute right-0 z-10 mt-2.5 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-gray-900/5 focus:outline-none">
                {userNavigation.map((item) => (
                  <Menu.Item key={item.name}>
                    {({ active }) => (
                      <a
                        href={item.href}
                        className={classNames(
                          active ? 'bg-gray-100' : '',
                          'block px-4 py-2 text-sm text-gray-700'
                        )}
                      >
                        {item.name}
                      </a>
                    )}
                  </Menu.Item>
                ))}
                <Menu.Item>
                  {({ active }) => (
                    <button
                      type="button"
                      onClick={() => logout()}
                      className={classNames(
                        active ? 'bg-gray-100' : '',
                        'block w-full text-left px-4 py-2 text-sm text-gray-700'
                      )}
                    >
                      Выйти
                    </button>
                  )}
                </Menu.Item>
              </Menu.Items>
            </Transition>
          </Menu>
        </div>
      </div>
    </div>
  )
}


File: ProtectedRoute.tsx
'use client'

import { useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '../app/context/AuthContext'

interface ProtectedRouteProps {
  children: React.ReactNode
}

const ProtectedRoute = ({ children }: ProtectedRouteProps) => {
  const { token } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (!token) {
      router.push('/signin')
    }
  }, [token, router])

  if (!token) {
    return null // Если нет токена, ничего не рендерим
  }

  return <>{children}</>
}

export default ProtectedRoute


File: Sidebar.tsx
// app/components/Sidebar.tsx
'use client'

import { useAuth } from '../app/context/AuthContext'
import { Dialog, Transition } from '@headlessui/react'
import {
  AcademicCapIcon,
  ArrowLeftOnRectangleIcon,
  ChartPieIcon,
  CreditCardIcon,
  HomeIcon,
  Squares2X2Icon,
  XMarkIcon,
  ViewfinderCircleIcon,
} from '@heroicons/react/24/outline'
import Link from 'next/link'
import { Fragment, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import classNames from 'classnames' // Убедитесь, что установлен пакет 'classnames'

const navigation = [
  { name: 'Дашборд', href: '/dashboard/my', icon: HomeIcon, current: false },
  { name: 'Отчеты', href: '/dashboard/reports', icon: ChartPieIcon, current: false },
  { name: 'Аишка', href: '/dashboard/ai', icon: ViewfinderCircleIcon, current: false },
]

export default function Sidebar({
  sidebarOpen,
  setSidebarOpen,
}: {
  sidebarOpen: boolean
  setSidebarOpen: (open: boolean) => void
}) {
  const { token, logout } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (!token) {
      router.push('/signin')
    }
  }, [token, router])

  if (!token) {
    return null // Или индикатор загрузки
  }

  return (
    <>
      {/* Mobile Sidebar */}
      <Transition.Root show={sidebarOpen} as={Fragment}>
        <Dialog as="div" className="relative z-50 lg:hidden" onClose={setSidebarOpen}>
          <Transition.Child
            as={Fragment}
            enter="transition-opacity ease-linear duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="transition-opacity ease-linear duration-300"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-gray-900/80" />
          </Transition.Child>

          <div className="fixed inset-0 flex">
            <Transition.Child
              as={Fragment}
              enter="transition ease-in-out duration-300 transform"
              enterFrom="-translate-x-full"
              enterTo="translate-x-0"
              leave="transition ease-in-out duration-300 transform"
              leaveFrom="translate-x-0"
              leaveTo="-translate-x-full"
            >
              {/* Увеличиваем ширину боковой панели для мобильной версии */}
              <Dialog.Panel className="relative mr-16 flex w-full max-w-xs sm:max-w-sm flex-1 transform bg-gray-900 p-6 overflow-hidden">
                <Transition.Child
                  as={Fragment}
                  enter="ease-in-out duration-300"
                  enterFrom="opacity-0"
                  enterTo="opacity-100"
                  leave="ease-in-out duration-300"
                  leaveFrom="opacity-100"
                  leaveTo="opacity-0"
                >
                  <button
                    type="button"
                    onClick={() => setSidebarOpen(false)}
                    className="absolute top-5 right-5 text-gray-400 hover:text-white"
                  >
                    <span className="sr-only">Close sidebar</span>
                    <XMarkIcon className="h-6 w-6" aria-hidden="true" />
                  </button>
                </Transition.Child>

                <div className="flex grow flex-col gap-y-5 overflow-y-auto">
                  <div className="flex text-gray-200 mt-6">
                    <Squares2X2Icon aria-hidden="true" className="h-10 w-10" />
                    <div className="flex-1 ml-2">
                      <div className="font-bold text-sm">Company name</div>
                      <div className="text-sm">Денис</div>
                    </div>
                  </div>

                  <nav className="flex flex-1 flex-col">
                    <ul role="list" className="flex flex-1 flex-col gap-y-7">
                      <li>
                        <ul role="list" className="-mx-2 space-y-1">
                          <li>
                            <Link
                              href="/dashboard"
                              className={classNames(
                                'bg-gray-200 text-gray-900',
                                'group flex gap-x-3 rounded-md p-2 text-sm leading-6'
                              )}
                            >
                              <AcademicCapIcon aria-hidden="true" className="h-6 w-6 shrink-0" />
                              <div>
                                <div className="font-semibold">Как начать работу?</div>
                                <div className="underline italic text-xs">за 3 шага &rarr;</div>
                              </div>
                            </Link>
                          </li>
                        </ul>
                      </li>

                      <li>
                        <ul role="list" className="-mx-2 space-y-1">
                          {navigation.map((item) => (
                            <li key={item.name}>
                              <Link
                                href={item.href}
                                className={classNames(
                                  item.current
                                    ? 'bg-gray-800 text-white'
                                    : 'text-gray-400 hover:bg-gray-800 hover:text-white',
                                  'group flex gap-x-3 rounded-md p-2 text-sm font-semibold leading-6'
                                )}
                              >
                                <item.icon aria-hidden="true" className="h-6 w-6 shrink-0" />
                                {item.name}
                              </Link>
                            </li>
                          ))}
                        </ul>
                      </li>

                      <li className="mt-auto">
                        <a
                          href="#"
                          className="group -mx-2 flex gap-x-3 rounded-md p-2 text-sm font-semibold leading-6 text-gray-400 hover:bg-gray-800 hover:text-white"
                        >
                          <CreditCardIcon aria-hidden="true" className="h-6 w-6 shrink-0" />
                          Оформить подписку
                        </a>
                        <button
                          type="button"
                          className="group -mx-2 flex gap-x-3 rounded-md p-2 text-sm font-semibold leading-6 text-gray-400 hover:bg-gray-800 hover:text-white"
                          onClick={() => logout()}
                        >
                          <ArrowLeftOnRectangleIcon aria-hidden="true" className="h-6 w-6 shrink-0" />
                          Выйти
                        </button>
                      </li>
                    </ul>
                  </nav>
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </Dialog>
      </Transition.Root>

      {/* Desktop Sidebar */}
      <div className="hidden lg:fixed lg:inset-y-0 lg:z-50 lg:flex lg:w-80 lg:flex-col"> {/* Изменили lg:w-72 на lg:w-80 */}
        <div className="flex grow flex-col gap-y-5 overflow-y-auto bg-gray-900 px-6 pb-4">
          <div className="flex text-gray-200 mt-6">
            <Squares2X2Icon aria-hidden="true" className="h-10 w-10" />
            <div className="flex-1 ml-2">
              <div className="font-bold text-sm">Company name</div>
              <div className="text-sm">Денис</div>
            </div>
          </div>

          <nav className="mt-6 flex flex-1 flex-col">
            <ul role="list" className="flex flex-1 flex-col gap-y-7">
              <li>
                <ul role="list" className="-mx-2 space-y-1">
                  <li>
                    <Link
                      href="/dashboard"
                      className={classNames(
                        'bg-gray-200 text-gray-900',
                        'group flex gap-x-3 rounded-md p-2 text-sm leading-6'
                      )}
                    >
                      <AcademicCapIcon aria-hidden="true" className="h-6 w-6 shrink-0" />
                      <div>
                        <div className="font-semibold">Как начать работу?</div>
                        <div className="underline italic text-xs">за 3 шага &rarr;</div>
                      </div>
                    </Link>
                  </li>
                </ul>
              </li>

              <li>
                <ul role="list" className="-mx-2 space-y-1">
                  {navigation.map((item) => (
                    <li key={item.name}>
                      <Link
                        href={item.href}
                        className={classNames(
                          item.current
                            ? 'bg-gray-800 text-white'
                            : 'text-gray-400 hover:bg-gray-800 hover:text-white',
                          'group flex gap-x-3 rounded-md p-2 text-sm font-semibold leading-6'
                        )}
                      >
                        <item.icon aria-hidden="true" className="h-6 w-6 shrink-0" />
                        {item.name}
                      </Link>
                    </li>
                  ))}
                </ul>
              </li>

              <li className="mt-auto">
                <a
                  href="#"
                  className="group -mx-2 flex gap-x-3 rounded-md p-2 text-sm font-semibold leading-6 text-gray-400 hover:bg-gray-800 hover:text-white"
                >
                  <CreditCardIcon aria-hidden="true" className="h-6 w-6 shrink-0" />
                  Оформить подписку
                </a>
                <button
                  type="button"
                  className="group -mx-2 flex gap-x-3 rounded-md p-2 text-sm font-semibold leading-6 text-gray-400 hover:bg-gray-800 hover:text-white"
                  onClick={() => logout()}
                >
                  <ArrowLeftOnRectangleIcon aria-hidden="true" className="h-6 w-6 shrink-0" />
                  Выйти
                </button>
              </li>
            </ul>
          </nav>
        </div>
      </div>
    </>
  )
}


File: WelcomeNavigation.tsx
import { ChevronRightIcon } from '@heroicons/react/20/solid'
import { CursorArrowRaysIcon, PlayCircleIcon, PlusCircleIcon, PresentationChartBarIcon, Squares2X2Icon } from '@heroicons/react/24/outline'

const navigation = [
  {
    id: 1,
    title: 'Подключите отчеты, которые вы ведете (например, управленческие отчеты, о продажах и тд)',
    subtitle: 'Чтобы отобразить все ключевые показатели на одной странице',
    icon: PlusCircleIcon,
    href: 'dashboard/reports'
  },
  {
    id: 2,
    title: 'Выберите показатели, которые вы хотите отобразить',
    subtitle: 'Так мы поймем, что показывать вам на дашборде',
    icon: CursorArrowRaysIcon,
    href: 'dashboard/ai'
  },
  {
    id: 3,
    title: 'Откройте дашборд и наблюдайте за показателями',
    subtitle: 'Чтобы видеть актуальную ситуацию по каждой области бизнеса',
    icon: PresentationChartBarIcon,
    href: 'dashboard/my'
  },
]

export default function WelcomeNavigation () {
  return (
    <div className="m-7">
      <div>
        <h2 className="text-2xl font-bold leading-7 text-gray-900 sm:truncate sm:text-3xl sm:tracking-tight">
          Добро пожаловать, Денис!
        </h2>
        <div className="mt-2 text-gray-700">
          Мы поможем вам разобраться в Панельке и начать работу с ней всего за 3 шага
        </div>
      </div>

      <ul
        role="list"
        className="mt-8 divide-y divide-gray-100 overflow-hidden bg-white shadow-sm ring-1 ring-gray-900/5 sm:rounded-xl"
      >
        {navigation.map((item) => (
          <li key={item.id} className="relative flex justify-between gap-x-6 px-4 py-5 hover:bg-gray-50 sm:px-6">
            <div className="flex min-w-0 gap-x-4">
              <item.icon aria-hidden="true" className="h-12 w-12 text-gray-500" />
              <div className="min-w-0 flex-auto">
                <p className="text-sm font-semibold leading-6 text-gray-900">
                  <a href={item.href}>
                    <span className="absolute inset-x-0 -top-px bottom-0" />
                    {item.title}
                  </a>
                </p>
                <p className="mt-1 flex text-xs leading-5 text-gray-500">
                  {item.subtitle}
                </p>
              </div>
            </div>

            <div className="flex shrink-0 items-center gap-x-4">
              <ChevronRightIcon aria-hidden="true" className="h-5 w-5 flex-none text-gray-400" />
            </div>
          </li>
        ))}
        <li className="relative flex justify-between px-4 py-4 hover:bg-gray-50 sm:px-6 divide-gray-900/5 bg-gray-50">
          <a
            href=""
            className="flex items-center justify-center gap-x-2.5 py-3 text-sm font-semibold leading-6 text-blue-500"
          >
            <PlayCircleIcon aria-hidden="true" className="h-5 w-5 flex-none text-blue-500" />
            Посмотреть видео-инструкцию по началу работы &rarr;
          </a>
        </li>
      </ul>
    </div>
  )
}

File: AuthContext.tsx
'use client'

import { createContext, useContext, useState, useEffect, ReactNode } from 'react'
import { useRouter } from 'next/navigation'
import { API_BASE_URL } from 'baseapi/config'

interface User {
  id: number
  email: string
  username: string
}

interface AuthContextType {
  token: string | null
  user: User | null
  loading: boolean
  login: (token: string) => Promise<void>
  logout: () => void
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [token, setToken] = useState<string | null>(null)
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState<boolean>(true)
  const router = useRouter()

  useEffect(() => {
    const storedToken = localStorage.getItem('token')
    if (storedToken) {
      setToken(storedToken)
      fetchUserData(storedToken)
    } else {
      setLoading(false)
    }
  }, [])

  const fetchUserData = async (token: string) => {
    try {
      const response = await fetch(`${API_BASE_URL}/user`, {
        headers: { 'Authorization': `Bearer ${token}` },
      })
      if (!response.ok) throw new Error('Failed to fetch user data')
      const data = await response.json()
      setUser(data.user_data)
  
      // Сохранение пользователя в localStorage
      localStorage.setItem('user', JSON.stringify(data.user_data))
    } catch (error) {
      logoutUser()
    } finally {
      setLoading(false)
    }
  }
  const loginUser = async (newToken: string) => {
    localStorage.setItem('token', newToken)
    setToken(newToken)
    await fetchUserData(newToken)
    router.push('/dashboard')
  }

  const logoutUser = () => {
    localStorage.clear()
    setToken(null)
    setUser(null)
    router.push('/signin')
  }

  return (
    <AuthContext.Provider value={{ token, user, loading, login: loginUser, logout: logoutUser }}>
      {!loading && children}
    </AuthContext.Provider>
  )
}

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext)
  if (context === undefined) throw new Error('useAuth must be used within an AuthProvider')
  return context
}

File: TableContext.tsx
// app/context/TableContext.tsx
import React, { createContext, useState, ReactNode } from 'react';

interface TableContextProps {
  tableName: string;
  setTableName: (name: string) => void;
}

export const TableContext = createContext<TableContextProps>({
  tableName: '',
  setTableName: () => {},
});

export const TableProvider = ({ children }: { children: ReactNode }) => {
  const [tableName, setTableName] = useState<string>('');

  return (
    <TableContext.Provider value={{ tableName, setTableName }}>
      {children}
    </TableContext.Provider>
  );
};


File: page.tsx

'use client'

import { useState } from 'react'
import WelcomeNavigation from '@/components/WelcomeNavigation'
import Sidebar from '@/components/Sidebar'
import Navbar from '@/components/Navbar'
import ProtectedRoute from '../../components/ProtectedRoute' // Adjust the import path
export default function StartPage () {
  const [sidebarOpen, setSidebarOpen] = useState(false)

  return (
    <ProtectedRoute>
      <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />

      <div className="lg:pl-72">
        <Navbar setSidebarOpen={setSidebarOpen} />

        <main className="py-10">
          <div className="px-4 sm:px-6 lg:px-8">
            <WelcomeNavigation />
          </div>
        </main>
      </div>
      </ProtectedRoute>
  )
}

File: page.tsx
'use client'

import { useState, useEffect, useRef } from 'react'
import Sidebar from '@/components/Sidebar'
import Navbar from '@/components/Navbar'
import { API_BASE_URL } from 'baseapi/config'
import { useAuth } from '@/app/context/AuthContext'
import { useRouter, useSearchParams } from 'next/navigation'

// Определение интерфейсов
interface ChartResponse {
  status: string
  graph_html: string
  timestamp: number
  prompt: string
}

interface TableItem {
  display_name: string
  last_updated: number
  table_name: string
  table_type: string
}

export default function AiPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false)
  const [prompt, setPrompt] = useState('')
  const [tableName, setTableName] = useState<string>('') // Стейт для хранения выбранной таблицы
  const [loading, setLoading] = useState(false)
  const [graphs, setGraphs] = useState<ChartResponse[]>([])
  const [error, setError] = useState<string | null>(null)

  // Состояния для таблиц
  const [tables, setTables] = useState<TableItem[]>([])
  const [tablesLoading, setTablesLoading] = useState<boolean>(false)
  const [tablesError, setTablesError] = useState<string | null>(null)

  // Ссылка для прокрутки к последнему графику
  const lastGraphRef = useRef<HTMLDivElement>(null)
  
  const { token: contextToken } = useAuth()
  const router = useRouter()
  const searchParams = useSearchParams() // Получаем параметры запроса

  // Функция для получения токена из localStorage
  const getTokenFromLocalStorage = (): string | null => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('token')
    }
    return null
  }

  // Используем токен из контекста или из localStorage
  const token = contextToken || getTokenFromLocalStorage()

  console.log('Текущий токен:', token) // Для отладки

  useEffect(() => {
    if (!token) {
      router.replace('/signin') // Перенаправляем на страницу входа
    }
  }, [token, router])

  // Получаем значение table_name из параметров запроса
  const tableNameParam = searchParams.get('table_name')

  // Получение таблиц при загрузке компонента
  useEffect(() => {
    const fetchTables = async () => {
      setTablesLoading(true)
      setTablesError(null)

      try {
        const response = await fetch(`${API_BASE_URL}/tables`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`, // Токен добавляется здесь
          },
        })

        if (!response.ok) {
          const errorText = await response.text()
          throw new Error(
            `Ошибка при получении таблиц: ${response.status} ${response.statusText}. ${errorText}`
          )
        }

        const data: { tables: TableItem[] } = await response.json()
        setTables(data.tables)

        // Если есть параметр table_name, устанавливаем его после загрузки таблиц
        if (tableNameParam) {
          const foundTable = data.tables.find((table) => table.table_name === tableNameParam)

          if (!foundTable) {
            console.log(`Указанный источник данных не найден: ${tableNameParam}`)
            setError('Указанный источник данных не найден.')
          } else {
            setTableName(foundTable.table_name)
          }
        }
      } catch (err: any) {
        setTablesError(err.message || 'Произошла ошибка при получении таблиц.')
      } finally {
        setTablesLoading(false)
      }
    }

    if (token) {
      fetchTables()
    }
  }, [token, tableNameParam])

  // Прокрутка к последнему графику при добавлении нового графика
  useEffect(() => {
    if (lastGraphRef.current) {
      lastGraphRef.current.scrollIntoView({ behavior: 'smooth' })
    }
  }, [graphs])

  // Функция для обработки отправки запроса
  const handleSubmit = async () => {
    // Проверка, что запрос не пустой
    if (!prompt.trim()) {
      setError('Пожалуйста, введите запрос.')
      return
    }

    // Проверка, что выбран источник
    if (!tableName) {
      setError('Пожалуйста, выберите источник данных.')
      return
    }

    setLoading(true)
    setError(null)

    try {
      const response = await fetch(`${API_BASE_URL}/create_chart`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`, // Токен добавляется здесь
        },
        body: JSON.stringify({
          table_name: tableName,
          chart_prompt: prompt,
        }),
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(
          `Ошибка: ${response.status} ${response.statusText}. ${errorText}`
        )
      }

      const data: ChartResponse = await response.json()

      if (data.status === 'success') {
        setGraphs((prevGraphs) => [...prevGraphs, data]) // Добавляем новый график в массив
        setPrompt('') // Очищаем поле ввода
        setError(null) // Сбрасываем ошибки
      } else {
        throw new Error('Не удалось создать график.')
      }
    } catch (err: any) {
      setError(err.message || 'Произошла ошибка.')
    } finally {
      setLoading(false)
    }
  }

  // Функция для отображения таблицы через иконку глаза
  const handleToggleTable = () => {
    if (tableName) {
      const selectedTable = tables.find((table) => table.table_name === tableName)
      if (selectedTable) {
        // Конструируем URL на основе table_name
        const tableUrl = `${API_BASE_URL}/dashboard?table_name=${encodeURIComponent(tableName)}`
        window.open(tableUrl, '_blank')
        setError(null)
      } else {
        setError('Ссылка на таблицу недоступна.')
      }
    } else {
      setError('Пожалуйста, выберите таблицу.')
    }
  }

  return (
    <>
      <div className="flex h-screen bg-gray-100">
        {/* Sidebar */}
        <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />

        {/* Main Content */}
        <div className="flex-1 flex flex-col lg:pl-80">
          <Navbar setSidebarOpen={setSidebarOpen} />

          <main className="flex-1 flex flex-col relative">
            {/* Область ответов (графики и таблицы) */}
            <div className="flex-1 overflow-y-auto px-4 sm:px-6 lg:px-8 py-6 mb-24 bg-gray-50">
              <div className="max-w-4xl mx-auto space-y-6">
                {/* Отображение графиков */}
                {graphs.length > 0 ? (
                  <div className="flex flex-col space-y-6">
                    {graphs.map((graph, index) => (
                      <div
                        key={index}
                        ref={index === graphs.length - 1 ? lastGraphRef : null}
                      >
                        <div className="bg-white p-4 rounded-lg shadow relative">
                          {/* Кнопки управления графиком */}
                          <div className="absolute top-2 right-2 flex space-x-2">
                            {/* Кнопка обновления графика */}
                            <button
                              onClick={async () => {
                                try {
                                  const response = await fetch(`${API_BASE_URL}/refresh_graph`, {
                                    method: 'POST',
                                    headers: {
                                      'Content-Type': 'application/json',
                                      'Authorization': `Bearer ${token}`, // Токен добавляется здесь
                                    },
                                    body: JSON.stringify({
                                      graph_id: index, // Предполагается, что у вас есть уникальный id
                                      table_name: tableName,
                                    }),
                                  })

                                  if (!response.ok) {
                                    const errorText = await response.text()
                                    throw new Error(
                                      `Ошибка: ${response.status} ${response.statusText}. ${errorText}`
                                    )
                                  }

                                  const data: ChartResponse = await response.json()

                                  if (data.status === 'success') {
                                    // Обновляем график в списке
                                    setGraphs((prevGraphs) => {
                                      const updatedGraphs = [...prevGraphs]
                                      updatedGraphs[index] = data
                                      return updatedGraphs
                                    })
                                  } else {
                                    throw new Error('Не удалось обновить график.')
                                  }
                                } catch (err: any) {
                                  setError(err.message || 'Произошла ошибка при обновлении графика.')
                                }
                              }}
                              className="text-blue-500 hover:text-blue-700"
                              aria-label="Обновить график"
                            >
                              {/* Иконка обновления */}
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582M20.418 19H20v-5h-.582M12 12v8m0-8l4-4m-4 4l-4-4" />
                              </svg>
                            </button>
                            {/* Кнопка удаления графика */}
                            <button
                              onClick={async () => {
                                const confirmDelete = window.confirm('Вы действительно хотите удалить этот график?')
                                if (!confirmDelete) return

                                try {
                                  const response = await fetch(`${API_BASE_URL}/delete_graph`, {
                                    method: 'POST',
                                    headers: {
                                      'Content-Type': 'application/json',
                                      'Authorization': `Bearer ${token}`, // Токен добавляется здесь
                                    },
                                    body: JSON.stringify({
                                      graph_id: index, // Предполагается, что у вас есть уникальный id
                                      table_name: tableName,
                                    }),
                                  })

                                  if (!response.ok) {
                                    const errorText = await response.text()
                                    throw new Error(
                                      `Ошибка: ${response.status} ${response.statusText}. ${errorText}`
                                    )
                                  }

                                  const data = await response.json()

                                  if (data.status === 'success') {
                                    // Удаляем график из списка
                                    setGraphs((prevGraphs) => prevGraphs.filter((_, i) => i !== index))
                                  } else {
                                    throw new Error('Не удалось удалить график.')
                                  }
                                } catch (err: any) {
                                  setError(err.message || 'Произошла ошибка при удалении графика.')
                                }
                              }}
                              className="text-red-500 hover:text-red-700"
                              aria-label="Удалить график"
                            >
                              {/* Иконка удаления */}
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                              </svg>
                            </button>
                          </div>

                          <p className="text-sm text-gray-600 mb-2 ml-1">
                            <strong>Запрос:</strong> {graph.prompt}
                          </p>
                          <iframe
                            srcDoc={atob(graph.graph_html)}
                            style={{
                              width: '100%',
                              height: '500px',
                              border: 'none',
                              overflow: 'hidden',
                            }}
                            title={`Graph-${index}`}
                            sandbox="allow-scripts allow-same-origin"
                          />
                          <p className="text-xs text-gray-500 mt-2">
                            Создано: {new Date(graph.timestamp * 1000).toLocaleString()}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  // Если нет графиков, показать приветственное сообщение и предложенные вопросы
                  <div className="flex flex-col h-full justify-center items-center space-y-6">
                    {/* Header Section */}
                    <div className="text-center">
                      <h1 className="font-semibold text-2xl">Аишка</h1>
                      <p className="mt-4">
                        Задавайте вопросы, чтобы получить информацию
                        <br />
                        о состоянии бизнеса и наиболее важных показателях
                      </p>
                    </div>
                    {/* Suggested Questions */}
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 w-full">
                      <div
                        className="p-10 border rounded-lg shadow hover:bg-gray-100 cursor-pointer"
                        onClick={() =>
                          setPrompt('Какие показатели ухудшились в этом месяце?')
                        }
                      >
                        Какие показатели ухудшились в этом месяце?
                      </div>
                      <div
                        className="p-10 border rounded-lg shadow hover:bg-gray-100 cursor-pointer"
                        onClick={() =>
                          setPrompt('Есть ли риск кассового разрыва?')
                        }
                      >
                        Есть ли риск кассового разрыва?
                      </div>
                      <div
                        className="p-10 border rounded-lg shadow hover:bg-gray-100 cursor-pointer"
                        onClick={() =>
                          setPrompt('Какие мои товары имеют наибольшую маржу?')
                        }
                      >
                        Какие мои товары имеют наибольшую маржу?
                      </div>
                      <div
                        className="p-10 border rounded-lg shadow hover:bg-gray-100 cursor-pointer"
                        onClick={() =>
                          setPrompt('Кто из продавцов не выполнил план в последнем месяце?')
                        }
                      >
                        Кто из продавцов не выполнил план в последнем месяце?
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Фиксированный блок ввода запроса и дисклэймер */}
            <div className="fixed bottom-0 left-0 right-0 lg:left-80 z-50">
              {/* Внешний контейнер фиксированного блока ввода с серым фоном */}
              <div className="bg-gray-50">
                {/* Внутренний контейнер с отступами и ограниченной шириной */}
                <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4 border-t border-gray-200 shadow-custom bg-white">
                  <div className="flex flex-col space-y-4">
                    {/* Input Prompt */}
                    <div className="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4 w-full">
                      <input
                        type="text"
                        placeholder="Введите запрос"
                        value={prompt}
                        onChange={(e) => setPrompt(e.target.value)}
                        className={`flex-1 border p-2 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                          loading || tablesLoading ? 'opacity-50 cursor-not-allowed' : ''
                        }`}
                        disabled={loading || tablesLoading}
                      />
                      <button
                        onClick={handleSubmit}
                        className="bg-blue-500 text-white px-4 py-2 rounded-lg disabled:bg-blue-300"
                        disabled={loading || tablesLoading}
                      >
                        {loading ? 'Загрузка...' : 'Узнать'}
                      </button>
                    </div>

                    {/* Селект источника с иконкой глаза справа */}
                    <div className="flex items-center space-x-2 w-full">
                      <label htmlFor="source" className="font-semibold">
                        Источник:
                      </label>
                      <div className="flex-1 flex items-center">
                        {/* Селект с уменьшенной высотой */}
                        <select
                          id="source"
                          value={tableName}
                          onChange={(e) => {
                            setTableName(e.target.value)
                          }}
                          className={`flex-1 border p-1 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 h-8 text-sm ${
                            loading || tablesLoading ? 'opacity-50 cursor-not-allowed' : ''
                          }`}
                          disabled={loading || tablesLoading}
                        >
                          <option value="">Выберите источник</option>
                          {tables.map((table) => (
                            <option key={table.table_name} value={table.table_name}>
                              {table.display_name}
                            </option>
                          ))}
                        </select>
                        
                        {/* Иконка глаза, расположенная справа от селекта */}
                        <button
                          type="button"
                          onClick={handleToggleTable}
                          className="ml-2 text-gray-500 hover:text-gray-700 h-8 w-8 flex items-center justify-center"
                          disabled={!tableName}
                          aria-label="Показать таблицу"
                        >
                          {/* SVG иконка глаза */}
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            className="h-5 w-5"
                            viewBox="0 0 20 20"
                            fill="currentColor"
                          >
                            <path d="M10 3C5.6 3 1.7 6.1 0 10c1.7 3.9 5.6 7 10 7s8.3-3.1 10-7c-1.7-3.9-5.6-7-10-7zm0 12a5 5 0 110-10 5 5 0 010 10z" />
                            <path d="M10 7a3 3 0 100 6 3 3 0 000-6z" />
                          </svg>
                        </button>
                      </div>
                    </div>

                    {/* Отображение ошибок */}
                    {error && (
                      <div className="p-4 bg-red-100 text-red-700 rounded-lg w-full">
                        {error}
                      </div>
                    )}
                  </div>

                  {/* Disclaimer */}
                </div>
                <div className="text-center text-sm text-gray-500 p-3">
                  Аишка может допускать ошибки. Рекомендуем проверять важную информацию.
                </div>
              </div>
            </div>
          </main>
        </div>
      </div>

      {/* Стили для кастомного скроллбара и боковой тени */}
      <style jsx>{`
        /* Стилизация кастомного скроллбара для области ответов */
        .overflow-y-auto::-webkit-scrollbar {
          width: 8px;
        }

        .overflow-y-auto::-webkit-scrollbar-track {
          background: #f1f1f1;
          border-radius: 4px;
        }

        .overflow-y-auto::-webkit-scrollbar-thumb {
          background-color: #c1c1c1;
          border-radius: 4px;
        }

        /* Для Firefox */
        .overflow-y-auto {
          scrollbar-width: thin;
          scrollbar-color: #c1c1c1 #f1f1f1;
        }

        /* Кастомная тень для блока ввода */
        .shadow-custom {
          border-radius: 10px;
        }

        .loader {
          border-top-color: #3498db;
          animation: spin 1s infinite linear;
        }

        @keyframes spin {
          to {
            transform: rotate(360deg);
          }
        }
      `}</style>
    </>
  )
}


File: page.tsx
// app/dashboard/my/page.tsx
'use client'

import { useState, useEffect, useContext } from 'react'
import { PlusIcon } from '@heroicons/react/24/outline'
import Sidebar from '@/components/Sidebar'
import Navbar from '@/components/Navbar'
import axios from 'axios'
import { API_BASE_URL } from 'baseapi/config'
import { useAuth } from '@/app/context/AuthContext'
import { useRouter } from 'next/navigation'
import { TableContext } from '@/app/context/TableContext'
import GraphRow from '@/components/GraphRow' // Импортируем GraphRow

// Функция для объединения классов
function classNames(...classes: Array<string>) {
  return classes.filter(Boolean).join(' ')
}

// Интерфейсы для типов данных
interface Graph {
  id: number
  timestamp: number
  prompt: string
  graph_html: string // base64
  is_up_to_date: boolean
}

interface DashboardData {
  display_name: string
  table_name: string
  data: Array<Record<string, any>>
  columns: Array<string>
  descriptions: Record<string, string>
  graphs: Array<Graph>
}

export default function MyDashboard() {
  const { token } = useAuth()
  const [sidebarOpen, setSidebarOpen] = useState(false)
  const [dashboardData, setDashboardData] = useState<DashboardData[]>([])
  const [isLoading, setIsLoading] = useState<boolean>(false)
  const [notification, setNotification] = useState<{ type: string; message: string } | null>(null)

  const router = useRouter()

  useEffect(() => {
    const storedData = localStorage.getItem('dashboardData')
    if (storedData) {
      setDashboardData(JSON.parse(storedData))
    } else {
      setIsLoading(true)
    }

    if (token) {
      fetchDashboardData()
    }
  }, [token])

  const getAuthHeaders = () => {
    return {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`,
    }
  }

  const fetchDashboardData = async () => {
    setIsLoading(true)
    try {
      const response = await axios.get(`${API_BASE_URL}/all_dashboards`, {
        headers: getAuthHeaders(),
      })
      const data: DashboardData[] = response.data.tables || response.data
      setDashboardData(data)
      localStorage.setItem('dashboardData', JSON.stringify(data))
    } catch (err: any) {
      console.error(err)
      setNotification({ type: 'error', message: 'Ошибка при загрузке данных дэшборда.' })
    } finally {
      setIsLoading(false)
    }
  }

  const handleAddMetric = (tableName: string) => {
    router.push(`/dashboard/ai?table_name=${encodeURIComponent(tableName)}`)
  }

  const handleDeleteGraph = async (graphId: number, tableName: string) => {
    const confirmed = confirm('Вы действительно хотите удалить этот график?')
    if (!confirmed) return

    try {
      const response = await axios.post(
        `${API_BASE_URL}/delete_graph`,
        {
          graph_id: graphId,
          table_name: tableName,
        },
        {
          headers: getAuthHeaders(),
        }
      )

      if (response.status === 200 && response.data.status === 'success') {
        setNotification({ type: 'success', message: response.data.message })
        await fetchDashboardData()
      } else {
        throw new Error(response.data.message || 'Не удалось удалить график.')
      }
    } catch (err: any) {
      console.error(err)
      setNotification({
        type: 'error',
        message: err.response?.data?.message || 'Что-то пошло не так.',
      })
    }
  }

  const handleRefreshGraph = async (graphId: number, tableName: string) => {
    try {
      const response = await axios.post(
        `${API_BASE_URL}/refresh_graph`,
        {
          graph_id: graphId,
          table_name: tableName,
        },
        {
          headers: getAuthHeaders(),
        }
      )

      if (response.status === 200 && response.data.status === 'success') {
        setNotification({ type: 'success', message: response.data.message })
        await fetchDashboardData()
      } else {
        throw new Error('Не удалось обновить график.')
      }
    } catch (err: any) {
      console.error(err)
      setNotification({
        type: 'error',
        message: err.response?.data?.message || 'Что-то пошло не так.',
      })
    }
  }

  useEffect(() => {
    if (notification) {
      const timer = setTimeout(() => {
        setNotification(null)
      }, 5000)

      return () => clearTimeout(timer)
    }
  }, [notification])

  const { tableName, setTableName } = useContext(TableContext)

  return (
    <div className="flex overflow-x-hidden">
      {/* Sidebar */}
      <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />

      {/* Основной контент */}
      <div className="flex-1 lg:pl-80">
        {/* Navbar */}
        <Navbar setSidebarOpen={setSidebarOpen} />

        {/* Основной контент страницы */}
        <main className="py-10">
          <div className="px-4 sm:px-6 lg:px-8">
            {/* Уведомления */}
            {notification && (
              <div className="mt-4">
                <div
                  className={`rounded-md p-4 ${
                    notification.type === 'success' ? 'bg-green-100' : 'bg-red-100'
                  }`}
                >
                  <div className="flex">
                    <div className="ml-3">
                      <p
                        className={`text-sm font-medium ${
                          notification.type === 'success' ? 'text-green-800' : 'text-red-800'
                        }`}
                      >
                        {notification.message}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Состояние загрузки */}
            {isLoading && (
              <div className="flex justify-center items-center h-64">
                <p className="text-gray-500">Загрузка данных...</p>
              </div>
            )}

            {/* Отображение данных дэшборда */}
            {!isLoading && dashboardData && dashboardData.length > 0 ? (
              dashboardData.map((section) => (
                <section key={section.display_name} className="mt-12">
                  <div className="mt-2 md:flex md:items-center md:justify-between">
                    <div className="min-w-0 flex-1">
                      <h2 className="text-2xl font-bold leading-7 text-gray-900 sm:truncate sm:text-3xl sm:tracking-tight">
                        {section.display_name}
                      </h2>
                    </div>
                    <div className="mt-4 flex flex-shrink-0 md:ml-4 md:mt-0">
                      <button
                        type="button"
                        onClick={() => handleAddMetric(section.table_name)}
                        className="inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                      >
                        <PlusIcon aria-hidden="true" className="h-5 w-5" />
                      </button>
                    </div>
                  </div>

                  {/* Компонент GraphRow с горизонтальной прокруткой */}
                  {section.graphs && section.graphs.length > 0 ? (
                    <GraphRow
                      graphs={section.graphs}
                      tableName={section.table_name}
                      handleDeleteGraph={handleDeleteGraph}
                      handleRefreshGraph={handleRefreshGraph}
                      handleAddMetric={handleAddMetric}
                    />
                  ) : (
                    <div className="mt-4 text-center p-4 text-gray-500">
                      Показатели отсутствуют. Нажмите на кнопку{' '}
                      <PlusIcon aria-hidden="true" className="inline h-5 w-5" /> справа, чтобы добавить.
                    </div>
                  )}
                </section>
              ))
            ) : (
              !isLoading && (
                <div className="text-center p-4 text-gray-500">
                  Нет доступных данных.
                </div>
              )
            )}
          </div>
        </main>
      </div>

      {/* Стили для кастомного скроллбара */}
      <style jsx>{`
        /* Скрыть стандартные скроллбары */
        .scrollbar-hide::-webkit-scrollbar {
          display: none;
        }

        .scrollbar-hide {
          -ms-overflow-style: none; /* IE and Edge */
          scrollbar-width: none; /* Firefox */
        }

        /* Стилизация кастомного скроллбара для горизонтальной прокрутки */
        .overflow-x-auto::-webkit-scrollbar {
          height: 8px;
        }

        .overflow-x-auto::-webkit-scrollbar-track {
          background: #f1f1f1;
          border-radius: 4px;
        }

        .overflow-x-auto::-webkit-scrollbar-thumb {
          background-color: rgba(0, 0, 0, 0.2);
          border-radius: 4px;
        }

        /* Для Firefox */
        .overflow-x-auto {
          scrollbar-width: thin;
          scrollbar-color: rgba(0, 0, 0, 0.2) #f1f1f1;
        }

        /* Убираем внутренние скроллбары у iframe, если они есть */
        iframe {
          overflow: hidden;
        }
      `}</style>
    </div>
  )
}


File: page.tsx
// app/dashboard/profile_settings/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { UserIcon, PencilIcon, CheckIcon } from '@heroicons/react/24/outline'
import Sidebar from '@/components/Sidebar'
import Navbar from '@/components/Navbar'
import axios from 'axios'
import { API_BASE_URL } from 'baseapi/config' // Используем новый алиас
import { useAuth } from '@/app/context/AuthContext'

interface UserProfile {
  id: number
  email: string
  username: string
  auth_type: string
}

export default function ProfilePage() {
  const { token, user } = useAuth()
  const [profile, setProfile] = useState<UserProfile | null>(null)
  const [isEditing, setIsEditing] = useState(false)
  const [isLoading, setIsLoading] = useState(false)

  useEffect(() => {
    if (user) {
      setProfile({ ...user, auth_type: '' }) // Добавляем значение для auth_type
    }
  }, [user])

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!profile) return
    const { name, value } = e.target
    setProfile({ ...profile, [name]: value })
  }

  const handleSaveChanges = async () => {
    if (!profile) return
    setIsLoading(true)
    try {
      const response = await axios.put(`${API_BASE_URL}/user`, profile, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      })
      if (response.status === 200) {
        setIsEditing(false)
        alert('Профиль успешно обновлен!')
      }
    } catch (err) {
      console.error('Ошибка при сохранении профиля:', err)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div>
      <Sidebar sidebarOpen={false} setSidebarOpen={() => {}} />
      <div className="lg:pl-72">
        <Navbar setSidebarOpen={() => {}} />
        <main className="py-10">
          <div className="px-4 sm:px-6 lg:px-8">
            <div className="mt-6 max-w-3xl mx-auto bg-white shadow sm:rounded-lg p-6">
              {isLoading ? (
                <p>Загрузка...</p>
              ) : (
                <>
                  {!isEditing ? (
                    <div className="space-y-6">
                      <div className="flex items-center">
                        <UserIcon className="h-6 w-6 text-gray-400" />
                        <span className="ml-3 text-gray-700">{profile?.username}</span>
                      </div>
                      <div className="flex items-center">
                        <UserIcon className="h-6 w-6 text-gray-400" />
                        <span className="ml-3 text-gray-700">{profile?.email}</span>
                      </div>
                      {/* Добавьте другие поля по необходимости */}
                      <button
                        type="button"
                        onClick={() => setIsEditing(true)}
                        className="inline-flex items-center px-4 py-2 bg-blue-500 text-white rounded-md shadow-sm"
                      >
                        <PencilIcon className="h-5 w-5 mr-2" />
                        Изменить
                      </button>
                    </div>
                  ) : (
                    <form className="space-y-6">
                      {/* Имя пользователя */}
                      <div className="flex items-center">
                        <UserIcon className="h-6 w-6 text-gray-400" />
                        <input
                          type="text"
                          name="username"
                          value={profile?.username || ''}
                          onChange={handleInputChange}
                          className="ml-3 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                          placeholder="Имя пользователя"
                        />
                      </div>

                      {/* Email */}
                      <div className="flex items-center">
                        <UserIcon className="h-6 w-6 text-gray-400" />
                        <input
                          type="email"
                          name="email"
                          value={profile?.email || ''}
                          onChange={handleInputChange}
                          className="ml-3 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                          placeholder="Email"
                        />
                      </div>

                      {/* Кнопки */}
                      <div className="flex justify-between">
                        <button
                          type="button"
                          onClick={handleSaveChanges}
                          className="inline-flex items-center px-4 py-2 bg-green-500 text-white rounded-md shadow-sm"
                        >
                          <CheckIcon className="h-5 w-5 mr-2" />
                          Сохранить
                        </button>
                        <button
                          type="button"
                          onClick={() => setIsEditing(false)}
                          className="inline-flex items-center px-4 py-2 bg-gray-500 text-white rounded-md shadow-sm"
                        >
                          Отмена
                        </button>
                      </div>
                    </form>
                  )}
                </>
              )}
            </div>
          </div>
        </main>
      </div>
    </div>
  )
}


File: page.tsx
// app/dashboard/reports/page.tsx
'use client'

import { useState, useEffect, Fragment } from 'react'
import { Dialog, Transition } from '@headlessui/react'
import {
  ArrowDownTrayIcon,
  DocumentIcon,
  PlayCircleIcon,
  XMarkIcon,
  ArrowPathIcon 
} from '@heroicons/react/24/outline'
import Sidebar from '@/components/Sidebar'
import Navbar from '@/components/Navbar'
import axios from 'axios'
import { API_BASE_URL } from 'baseapi/config'
import { useAuth } from '@/app/context/AuthContext'

function classNames(...classes: Array<string>) {
  return classes.filter(Boolean).join(' ')
}

interface Tab {
  name: string
  href: string
  current: boolean
}

interface TableMetadata {
  table_name: string
  display_name: string
  table_type: 'excel' | 'google'
  last_updated: number // Unix формат
}

interface ColumnSchema {
  column_name: string
  column_type: string
  column_desc: string
}

interface TableSchema {
  name: string
  columns: ColumnSchema[]
}

interface Graph {
  graph_id: number
  table_name: string
  graph_data: any // Замените на ваш тип данных графика
}

const initialTabs: Array<Tab> = [
  { name: 'Google таблицы', href: '#', current: true },
  { name: 'Excel', href: '#', current: false },
]

export default function ReportsPage() {
  const { token } = useAuth()

  // Состояния
  const [sidebarOpen, setSidebarOpen] = useState(false)
  const [isOpen, setIsOpen] = useState(false)
  const [isEditColumnsOpen, setIsEditColumnsOpen] = useState(false)
  const [uploadedFileName, setUploadedFileName] = useState('')
  const [reportType, setReportType] = useState('Управленческий отчет')
  const [reportName, setReportName] = useState('')
  const [currentTabs, setCurrentTabs] = useState(initialTabs)
  const [googleSheetURL, setGoogleSheetURL] = useState('')
  const [numRows, setNumRows] = useState<number | null>(null)
  const [tables, setTables] = useState<TableMetadata[]>([])
  const [graphs, setGraphs] = useState<Graph[]>([]) // Состояние для графиков
  const [loading, setLoading] = useState<boolean>(false)
  const [isProcessing, setIsProcessing] = useState<boolean>(false) // Состояние для прелоадера
  const [notification, setNotification] = useState<{ type: string; message: string } | null>(null)
  const [currentEditingTable, setCurrentEditingTable] = useState<TableMetadata | null>(null)
  const [schema, setSchema] = useState<TableSchema | null>(null)

  const currentTab = currentTabs.find((tab) => tab.current)?.name

  // Загрузка таблиц и графиков при монтировании компонента
  useEffect(() => {
    if (token) {
      fetchTables()
      fetchGraphs()
    }
  }, [token])

  const getAuthHeaders = () => {
    return {
      Authorization: `Bearer ${token}`,
    }
  }

  const fetchTables = async () => {
    setLoading(true)
    try {
      const response = await axios.get(`${API_BASE_URL}/tables`, {
        headers: getAuthHeaders(),
      })
      const data = response.data
      if (data.tables && Array.isArray(data.tables)) {
        setTables(data.tables)
      } else {
        setNotification({ type: 'error', message: 'Некорректный формат данных от сервера.' })
      }
    } catch (err: any) {
      console.error(err)
      setNotification({ type: 'error', message: 'Ошибка при загрузке таблиц.' })
    } finally {
      setLoading(false)
    }
  }

  // Функция для получения списка графиков (заглушка, нужно реализовать на бэкенде)
  const fetchGraphs = async () => {
    // Здесь вы должны реализовать запрос для получения списка графиков
    // Для демонстрации используем заглушку
    const sampleGraphs: Graph[] = [
      // Пример данных графиков
      // { graph_id: 1, table_name: 'table_1', graph_data: {...} },
    ]
    setGraphs(sampleGraphs)
  }

  // Обработчик добавления отчета
  const handleAddReport = async () => {
    try {
      if (currentTab === 'Google таблицы') {
        setIsProcessing(true) // Начинаем процесс, показываем прелоадер

        // Генерация схемы таблицы
        const schemaResponse = await axios.post(
          `${API_BASE_URL}/generate_schema`,
          {
            sheet_url: googleSheetURL,
            num_rows: numRows,
          },
          {
            headers: getAuthHeaders(),
          }
        )

        if (schemaResponse.status === 200 && schemaResponse.data) {
          setSchema(schemaResponse.data)
          setIsOpen(false)
          setIsEditColumnsOpen(true)
        } else {
          throw new Error('Не удалось сгенерировать схему таблицы.')
        }
      }
      // Логика для Excel можно добавить здесь
    } catch (err: any) {
      console.error(err)
      setNotification({
        type: 'error',
        message: err.response?.data?.message || 'Ошибка при добавлении отчета.',
      })
    } finally {
      setIsProcessing(false) // Завершаем процесс, скрываем прелоадер
    }
  }

  // Создание таблицы после редактирования колонок
  const handleCreateTable = async () => {
    if (!schema) return

    try {
      setIsProcessing(true) // Начинаем процесс, показываем прелоадер

      const payload = {
        json_data: schema,
        sheet_url: googleSheetURL,
        num_rows: numRows,
        display_name: reportName || 'Новый Google отчет',
      }

      const response = await axios.post(`${API_BASE_URL}/create_table`, payload, {
        headers: getAuthHeaders(),
      })

      if (response.status === 200 && response.data.status === 'success') {
        const newTable: TableMetadata = {
          table_name: response.data.table_name,
          display_name: reportName || 'Новый Google отчет',
          table_type: 'google',
          last_updated: Date.now() / 1000,
        }
        setTables([...tables, newTable])
        setNotification({ type: 'success', message: 'Таблица успешно создана.' })
        setIsEditColumnsOpen(false)
        setSchema(null)
        setGoogleSheetURL('')
        setReportName('')
        setNumRows(null)
      } else {
        throw new Error(response.data.message || 'Не удалось создать таблицу.')
      }
    } catch (err: any) {
      console.error(err)
      setNotification({ type: 'error', message: err.response?.data?.message || 'Ошибка при создании таблицы.' })
    } finally {
      setIsProcessing(false) // Завершаем процесс, скрываем прелоадер
    }
  }

  // Обновление таблицы
  const handleUpdateTable = async (table_name: string) => {
    try {
      setLoading(true)
      const response = await axios.post(
        `${API_BASE_URL}/update_table`,
        { table_name },
        {
          headers: getAuthHeaders(),
        }
      )

      if (response.status === 200 && response.data.status === 'success') {
        setNotification({ type: 'success', message: 'Таблица успешно обновлена.' })
        await fetchTables()
      } else {
        throw new Error(response.data.message || 'Не удалось обновить таблицу.')
      }
    } catch (err: any) {
      console.error(err)
      setNotification({
        type: 'error',
        message: err.response?.data?.message || 'Ошибка при обновлении таблицы.',
      })
    } finally {
      setLoading(false)
    }
  }

  // Удаление таблицы
  const handleDeleteTable = async (table_name: string) => {
    if (!confirm('Вы уверены, что хотите удалить эту таблицу?')) return

    try {
      setLoading(true)
      // Предположим, что для удаления таблицы используется метод POST с указанием имени таблицы в теле
      const response = await axios.post(
        `${API_BASE_URL}/delete_table`,
        { table_name },
        {
          headers: getAuthHeaders(),
        }
      )

      if (response.status === 200 && response.data.status === 'success') {
        const updatedTables = tables.filter((table) => table.table_name !== table_name)
        setTables(updatedTables)
        setNotification({ type: 'success', message: 'Таблица успешно удалена.' })
      } else {
        throw new Error(response.data.message || 'Не удалось удалить таблицу.')
      }
    } catch (err: any) {
      console.error(err)
      setNotification({
        type: 'error',
        message: err.response?.data?.message || 'Ошибка при удалении таблицы.',
      })
    } finally {
      setLoading(false)
    }
  }

  // Обновление графика
  const handleUpdateGraph = async (graph_id: number, table_name: string) => {
    try {
      setLoading(true)
      const response = await axios.post(
        `${API_BASE_URL}/refresh_graph`,
        { graph_id, table_name },
        {
          headers: getAuthHeaders(),
        }
      )

      if (response.status === 200 && response.data.status === 'success') {
        setNotification({ type: 'success', message: 'График успешно обновлен.' })
        await fetchGraphs()
      } else {
        throw new Error(response.data.message || 'Не удалось обновить график.')
      }
    } catch (err: any) {
      console.error(err)
      setNotification({
        type: 'error',
        message: err.response?.data?.message || 'Ошибка при обновлении графика.',
      })
    } finally {
      setLoading(false)
    }
  }

  // Удаление графика
  const handleDeleteGraph = async (graph_id: number, table_name: string) => {
    if (!confirm('Вы действительно хотите удалить этот график?')) return

    try {
      setLoading(true)
      const response = await axios.post(
        `${API_BASE_URL}/delete_graph`,
        { graph_id, table_name },
        {
          headers: getAuthHeaders(),
        }
      )

      if (response.status === 200 && response.data.status === 'success') {
        const updatedGraphs = graphs.filter((graph) => graph.graph_id !== graph_id)
        setGraphs(updatedGraphs)
        setNotification({ type: 'success', message: 'График успешно удален.' })
      } else {
        throw new Error(response.data.message || 'Не удалось удалить график.')
      }
    } catch (err: any) {
      console.error(err)
      setNotification({
        type: 'error',
        message: err.response?.data?.message || 'Ошибка при удалении графика.',
      })
    } finally {
      setLoading(false)
    }
  }

  // Переключение вкладок
  const handleTabClick = (selectedTabName: string) => {
    const updatedTabs = currentTabs.map((tab) => ({
      ...tab,
      current: tab.name === selectedTabName,
    }))
    setCurrentTabs(updatedTabs)
  }

  // Фильтрация таблиц
  const filteredTables = tables.filter((table) => {
    if (currentTab === 'Excel') return table.table_type === 'excel'
    if (currentTab === 'Google таблицы') return table.table_type === 'google'
    return true
  })

  // Автоматическое скрытие уведомлений
  useEffect(() => {
    if (notification) {
      const timer = setTimeout(() => {
        setNotification(null)
      }, 5000)

      return () => clearTimeout(timer)
    }
  }, [notification])

  return (
    <div>
      {/* Прелоадер */}
      {isProcessing && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-gray-700 bg-opacity-75">
          <div className="flex items-center space-x-2">
            <svg
              className="w-6 h-6 animate-spin text-white"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                className="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                strokeWidth="4"
              ></circle>
              <path
                className="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8v8H4z"
              ></path>
            </svg>
            <span className="text-white text-lg">Обработка...</span>
          </div>
        </div>
      )}

      {/* Sidebar */}
      <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />

      <div className="lg:pl-80">
        {/* Navbar */}
        <Navbar setSidebarOpen={setSidebarOpen} />

        {/* Основной контент страницы */}
        <main className="py-10">
          <div className="px-4 sm:px-6 lg:px-8">
            {/* Заголовок страницы */}
            <div>
              <h2 className="text-2xl font-bold leading-7 text-gray-900 sm:truncate sm:text-3xl sm:tracking-tight">
                Загрузить отчеты
              </h2>
            </div>

            {/* Уведомления */}
            {notification && (
              <div className="mt-4">
                <div
                  className={`rounded-md p-4 ${
                    notification.type === 'success' ? 'bg-green-100' : 'bg-red-100'
                  }`}
                >
                  <div className="flex">
                    <div className="ml-3">
                      <p
                        className={`text-sm font-medium ${
                          notification.type === 'success' ? 'text-green-800' : 'text-red-800'
                        }`}
                      >
                        {notification.message}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Вкладки */}
            <div className="mt-10">
              {/* Для мобильных устройств */}
              <div className="sm:hidden">
                <label htmlFor="tabs" className="sr-only">
                  Выберите вкладку
                </label>
                <select
                  id="tabs"
                  name="tabs"
                  value={currentTab}
                  onChange={(e) => handleTabClick(e.target.value)}
                  className="block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                >
                  {currentTabs.map((tab) => (
                    <option key={tab.name} value={tab.name}>
                      {tab.name}
                    </option>
                  ))}
                </select>
              </div>
              {/* Для настольных устройств */}
              <div className="hidden sm:block">
                <div className="border-b border-gray-200">
                  <nav aria-label="Tabs" className="-mb-px flex space-x-8">
                    {currentTabs.map((tab) => (
                      <button
                        key={tab.name}
                        onClick={() => handleTabClick(tab.name)}
                        className={classNames(
                          tab.current
                            ? 'border-indigo-500 text-indigo-600'
                            : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700',
                          'whitespace-nowrap border-b-2 px-1 py-4 text-sm font-medium'
                        )}
                      >
                        {tab.name}
                      </button>
                    ))}
                  </nav>
                </div>
              </div>
            </div>

            {/* Кнопки действий */}
            <div>
              <div className="mt-6 flex gap-4">
                {currentTab === 'Google таблицы' && (
                  <button
                    type="button"
                    onClick={() => setIsOpen(true)}
                    className="inline-flex items-center gap-x-1.5 rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                  >
                    <ArrowDownTrayIcon aria-hidden="true" className="-ml-0.5 h-5 w-5" />
                    Загрузить гугл таблицу
                  </button>
                )}

                {/* Дополнительные кнопки */}
                <button
                  type="button"
                  className="inline-flex items-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                >
                  <DocumentIcon aria-hidden="true" className="-ml-0.5 h-5 w-5" />
                  Пример файла
                </button>

                <button
                  type="button"
                  className="inline-flex items-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                >
                  <PlayCircleIcon aria-hidden="true" className="-ml-0.5 h-5 w-5" />
                  Видео инструкция
                </button>
              </div>
            </div>

            {/* Таблица отчетов */}
            <div className="mt-8 flow-root">
              <div className="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
                <div className="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
                  <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg">
                    <table className="min-w-full divide-y divide-gray-300">
                      <thead className="bg-gray-50">
                        <tr>
                          <th
                            scope="col"
                            className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6"
                          >
                            Имя
                          </th>
                          <th
                            scope="col"
                            className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                          >
                            Тип отчета
                          </th>
                          <th
                            scope="col"
                            className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                          >
                            Статус
                          </th>
                          <th
                            scope="col"
                            className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                          >
                            Действия
                          </th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200 bg-white">
                        {loading && (
                          <tr>
                            <td colSpan={4} className="py-4 text-center text-sm text-gray-500">
                              Загрузка таблиц...
                            </td>
                          </tr>
                        )}
                        {!loading && filteredTables.length === 0 && (
                          <tr>
                            <td colSpan={4} className="py-4 text-center text-sm text-gray-500">
                              Нет доступных таблиц.
                            </td>
                          </tr>
                        )}
                        {!loading &&
                          filteredTables.map((table) => (
                            <tr key={table.table_name}>
                              <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">
                                {table.display_name}
                              </td>
                              <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-700 capitalize">
                                {table.table_type === 'excel' ? 'Excel' : 'Google Таблицы'}
                              </td>
                              <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-700">
                                Подключен к дашбоарду
                              </td>
                              <td className="relative whitespace-nowrap py-4 pl-3 pr-4 text-sm font-medium sm:pr-6 flex gap-4">
                                <button
                                  onClick={() => handleUpdateTable(table.table_name)}
                                  className="text-blue-600 hover:underline"
                                >
                                  Обновить
                                </button>

                                <button
                                  onClick={() => handleDeleteTable(table.table_name)}
                                  className="text-red-600 hover:underline"
                                >
                                  Удалить
                                </button>
                              </td>
                            </tr>
                          ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>


            {/* Модальное окно для добавления отчета */}
            <Transition.Root show={isOpen} as={Fragment}>
              <Dialog as="div" className="relative z-10" onClose={setIsOpen}>
                {/* Затемняющий фон */}
                <Transition.Child
                  as={Fragment}
                  enter="ease-out duration-300"
                  enterFrom="opacity-0"
                  enterTo="opacity-100"
                  leave="ease-in duration-200"
                  leaveFrom="opacity-100"
                  leaveTo="opacity-0"
                >
                  <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
                </Transition.Child>

                {/* Контейнер модального окна */}
                <div className="fixed inset-0 z-10 overflow-y-auto">
                  <div className="flex min-h-full items-center justify-center p-4 text-center">
                    <Transition.Child
                      as={Fragment}
                      enter="ease-out duration-300"
                      enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                      enterTo="opacity-100 translate-y-0 sm:scale-100"
                      leave="ease-in duration-200"
                      leaveFrom="opacity-100 translate-y-0 sm:scale-100"
                      leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                    >
                      <Dialog.Panel className="relative transform overflow-hidden rounded-lg bg-white px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                        {/* Заголовок модального окна */}
                        <Dialog.Title
                          as="h3"
                          className="text-lg leading-6 font-medium text-gray-900 text-center"
                        >
                          Добавление Google таблицы
                        </Dialog.Title>
                        <div className="mt-5">
                          {/* Поле ввода ссылки на Google таблицу */}
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-700">
                              Ссылка на Google таблицу
                            </label>
                            <input
                              type="url"
                              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"
                              placeholder="Вставьте ссылку на Google таблицу"
                              value={googleSheetURL}
                              onChange={(e) => setGoogleSheetURL(e.target.value)}
                            />
                          </div>

                          {/* Поле ввода количества строк */}
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-700">
                              Количество строк для анализа (оставьте пустым для всех строк)
                            </label>
                            <input
                              type="number"
                              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"
                              placeholder="Например, 100"
                              value={numRows !== null ? numRows : ''}
                              onChange={(e) => setNumRows(e.target.value ? parseInt(e.target.value) : null)}
                            />
                          </div>

                          {/* Выпадающий список типа отчета */}
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-700">
                              Тип отчета
                            </label>
                            <select
                              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"
                              value={reportType}
                              onChange={(e) => setReportType(e.target.value)}
                            >
                              <option>Управленческий отчет</option>
                              <option>Отчет по продажам / маркетингу</option>
                              <option>Отчет по персоналу</option>
                              <option>Отчет по проектам</option>
                              <option>Другой</option>
                            </select>
                          </div>

                          {/* Поле названия отчета */}
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-700">
                              Название отчета
                            </label>
                            <input
                              type="text"
                              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"
                              placeholder="Например, о прибылях и убытках, о продажах и тд"
                              value={reportName}
                              onChange={(e) => setReportName(e.target.value)}
                            />
                          </div>

                          {/* Кнопка действия */}
                          <div className="mt-5 sm:mt-6">
                            <button
                              type="button"
                              className="inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:text-sm"
                              onClick={handleAddReport}
                            >
                              Добавить отчет
                            </button>
                          </div>
                        </div>
                      </Dialog.Panel>
                    </Transition.Child>
                  </div>
                </div>
              </Dialog>
            </Transition.Root>
            {/* Конец модального окна для добавления отчета */}

            {/* Модальное окно для редактирования колонок */}
            <Transition.Root show={isEditColumnsOpen} as={Fragment}>
              <Dialog as="div" className="fixed inset-0 z-50 overflow-y-auto" onClose={setIsEditColumnsOpen}>
                <div className="flex min-h-screen items-center justify-center p-4 text-center sm:p-0">
                  <Transition.Child
                    as={Fragment}
                    enter="ease-out duration-300"
                    enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                    enterTo="opacity-100 translate-y-0 sm:scale-100"
                    leave="ease-in duration-200"
                    leaveFrom="opacity-100 translate-y-0 sm:scale-100"
                    leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                  >
                    <Dialog.Panel className="relative transform overflow-hidden rounded-lg bg-white px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-4xl sm:p-6">
                      {/* Содержимое модального окна */}
                      <div>
                        <Dialog.Title as="h3" className="text-lg leading-6 font-medium text-gray-900 text-center">
                          Редактирование колонок таблицы
                        </Dialog.Title>
                        <div className="mt-4">
                          {schema && (
                            <form>
                              <div className="overflow-x-auto">
                                <table className="min-w-full divide-y divide-gray-300">
                                  <thead>
                                    <tr>
                                      <th className="px-3 py-2 text-left text-sm font-semibold text-gray-900">
                                        Название колонки
                                      </th>
                                      <th className="px-3 py-2 text-left text-sm font-semibold text-gray-900">
                                        Тип данных
                                      </th>
                                      <th className="px-3 py-2 text-left text-sm font-semibold text-gray-900">
                                        Описание
                                      </th>
                                    </tr>
                                  </thead>
                                  <tbody className="divide-y divide-gray-200">
                                    {schema.columns.map((column, index) => (
                                      <tr key={index}>
                                        <td className="px-3 py-2 text-sm text-gray-900">
                                          {column.column_name}
                                        </td>
                                        <td className="px-3 py-2 text-sm text-gray-900">
                                          {column.column_type}
                                        </td>
                                        <td className="px-3 py-2 text-sm text-gray-900">
                                          <input
                                            type="text"
                                            value={column.column_desc}
                                            onChange={(e) => {
                                              const updatedColumns = [...schema.columns]
                                              updatedColumns[index].column_desc = e.target.value
                                              setSchema({
                                                ...schema,
                                                columns: updatedColumns,
                                              })
                                            }}
                                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"
                                          />
                                        </td>
                                      </tr>
                                    ))}
                                  </tbody>
                                </table>
                              </div>
                            </form>
                          )}
                        </div>
                      </div>
                      {/* Кнопки действия */}
                      <div className="mt-5 sm:mt-6 sm:flex sm:flex-row-reverse">
                        <button
                          type="button"
                          onClick={handleCreateTable}
                          className="inline-flex w-full justify-center rounded-md border border-transparent px-4 py-2 bg-indigo-600 text-base font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none sm:ml-3 sm:w-auto sm:text-sm"
                        >
                          Подтвердить
                        </button>
                        <button
                          type="button"
                          className="mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 px-4 py-2 bg-white text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                          onClick={() => setIsEditColumnsOpen(false)}
                        >
                          Отмена
                        </button>
                      </div>
                    </Dialog.Panel>
                  </Transition.Child>
                </div>
              </Dialog>
            </Transition.Root>
            {/* Конец модального окна для редактирования колонок */}
          </div>
        </main>
      </div>
    </div>
  )
}


File: ProtectedRoute.tsx
// app/hoc/ProtectedRoute.tsx
'use client'

import { useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '../context/AuthContext' // Убедитесь, что путь к AuthContext правильный

interface ProtectedRouteProps {
  children: React.ReactNode
}

const ProtectedRoute = ({ children }: ProtectedRouteProps) => {
  const { token } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (!token) {
      router.push('/signin')
    }
  }, [token, router])

  if (!token) {
    return null // Или можно добавить индикатор загрузки
  }

  return <>{children}</>
}

export default ProtectedRoute


File: actions.ts
'use server'
async function sleep (ms: number) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

export async function createTodo(prevState: any, formData: FormData) {  
  try {
    await sleep(2000)
    return { message: 'Created' }
  } catch (e) {
    return { message: 'Failed to create' }
  }
}

export async function authorization (formData: FormData) {  
  await signIn('credentials', formData)
}

export async function googleAuthorization () {  
  // await signIn('google')
}

function signIn(arg0: string, formData: FormData) {
  throw new Error("Function not implemented.");
}


File: prisma.ts
import { PrismaClient } from "@prisma/client"

const prisma = new PrismaClient({
  log: [
    // {
    //   emit: 'stdout',
    //   level: 'query'
    // },
    {
      emit: 'stdout',
      level: 'error'
    },
    {
      emit: 'stdout',
      level: 'info'
    },
    {
      emit: 'stdout',
      level: 'warn'
    }
  ]
})


export default prisma

File: page.tsx
// app/signin/page.tsx
'use client'

import { useState, FormEvent } from 'react'
import Link from 'next/link'
import { useAuth } from '../context/AuthContext'
import { API_BASE_URL } from 'baseapi/config' // Используем новый алиас

export default function SigninPage() {
  const [email, setEmail] = useState<string>('')
  const [password, setPassword] = useState<string>('')
  const [message, setMessage] = useState<string>('') 
  const { login } = useAuth() 
  const [isLoading, setIsLoading] = useState<boolean>(false)

  const handleLogin = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    setMessage('')
    setIsLoading(true)

    try {
      const response = await fetch(`${API_BASE_URL}/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email, password })
      })

      const result = await response.json()

      if (response.ok && result.token) {
        await login(result.token) // Вызов функции логина из AuthContext с передачей токена
      } else {
        setMessage(result.message || 'Ошибка при входе.')
      }
    } catch (error) {
      console.error('Ошибка входа:', error)
      setMessage('Произошла ошибка. Пожалуйста, попробуйте позже.')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="flex min-h-full flex-1 flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="mt-10 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white px-6 py-12 shadow sm:rounded-lg sm:px-12">
          <div>
            <h2 className="text-2xl font-bold leading-9 tracking-tight text-gray-900">Вход в Панельку</h2>
            <p className="mt-2 text-sm text-gray-600">Полноценный доступ к работе с сервисом</p>
          </div>

          {/* Отображение сообщений */}
          {message && (
            <div className="mt-4 text-center text-sm text-red-600">
              {message}
            </div>
          )}

          <form onSubmit={handleLogin} className="mt-8 space-y-6">
            <div>
              <label htmlFor="email" className="sr-only">Email</label>
              <input
                id="email"
                name="email"
                type="email"
                placeholder="Ваш email"
                required
                autoComplete="email"
                className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-indigo-600 sm:text-sm"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>

            <div>
              <label htmlFor="password" className="sr-only">Пароль</label>
              <input
                id="password"
                name="password"
                type="password"
                placeholder="Ваш пароль"
                required
                autoComplete="current-password"
                className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-indigo-600 sm:text-sm"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600"
                />
                <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
                  Запомнить меня
                </label>
              </div>

              <div className="text-sm">
                <a href="#" className="font-medium text-indigo-600 hover:text-indigo-500">
                  Забыли пароль?
                </a>
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={isLoading}
                className={`flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:ring-offset-2 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
              >
                {isLoading ? 'Вход...' : 'Войти'}
              </button>
            </div>
          </form>

          <div className="mt-6">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="bg-white px-2 text-gray-500">Или войти через</span>
              </div>
            </div>

            <div className="mt-6 grid grid-cols-1 gap-4">
              {/* Реализуйте кнопки для социальных логинов, если необходимо */}
            </div>
          </div>
        </div>

        <p className="mt-10 text-center text-sm text-gray-500">
          Еще не зарегистрированы?{' '}
          <Link href="/signup" className="font-medium text-indigo-600 hover:text-indigo-500">
            Пройти регистрацию
          </Link>
        </p>
      </div>
    </div>
  )
}


File: page.tsx
// app/signup/page.tsx
'use client'

import { useState, FormEvent } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { API_BASE_URL } from 'baseapi/config' // Используем новый алиас

export default function SignupPage() {
  const [username, setUsername] = useState('')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('') // Добавляем поле для пароля
  const [message, setMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const router = useRouter()

  const register = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    setIsLoading(true)
    setMessage('')

    try {
      const response = await fetch(`${API_BASE_URL}/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, username, password }) // Передаем пароль
      })

      const data = await response.json()

      if (response.ok) {
        setMessage('Регистрация прошла успешно!')
        router.push('/signin')
      } else {
        setMessage(data.message || 'Ошибка при регистрации.')
      }
    } catch (error) {
      console.error('Ошибка регистрации:', error)
      setMessage('Произошла ошибка. Пожалуйста, попробуйте позже.')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="flex min-h-full flex-1 flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="mt-10 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white px-6 py-12 shadow sm:rounded-lg sm:px-12">
          <div>
            <h2 className="text-2xl font-bold leading-9 tracking-tight text-gray-900">Регистрация в Панельку</h2>
            <p className="mt-2 text-sm text-gray-600">Полноценный доступ к работе с сервисом</p>
          </div>

          {/* Отображение сообщений */}
          {message && (
            <div className={`mt-4 text-center text-sm ${message.includes('успешно') ? 'text-green-600' : 'text-red-600'}`}>
              {message}
            </div>
          )}

          <form onSubmit={register} className="mt-8 space-y-6">
            <div>
              <label htmlFor="username" className="sr-only">Как вас зовут?</label>
              <input
                id="username"
                name="username"
                type="text"
                placeholder="Как вас зовут?"
                required
                className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-indigo-600 sm:text-sm"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
              />
            </div>

            <div>
              <label htmlFor="email" className="sr-only">Email</label>
              <input
                id="email"
                name="email"
                type="email"
                placeholder="Email"
                required
                className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-indigo-600 sm:text-sm"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>

            <div>
              <label htmlFor="password" className="sr-only">Пароль</label>
              <input
                id="password"
                name="password"
                type="password"
                placeholder="Пароль"
                required
                className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-indigo-600 sm:text-sm"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600"
                />
                <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
                  Запомнить меня
                </label>
              </div>

              <div className="text-sm">
                <a href="#" className="font-medium text-indigo-600 hover:text-indigo-500">
                  Забыли пароль?
                </a>
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={isLoading}
                className={`flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:ring-offset-2 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
              >
                {isLoading ? 'Регистрация...' : 'Зарегистрироваться'}
              </button>
            </div>
          </form>

          <div className="mt-6">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="bg-white px-2 text-gray-500">Или войти через</span>
              </div>
            </div>

            <div className="mt-6 grid grid-cols-1 gap-4">
              {/* Реализуйте кнопки для социальных логинов, если необходимо */}
            </div>
          </div>
        </div>

        <p className="mt-10 text-center text-sm text-gray-500">
          Уже зарегистрированы?{' '}
          <Link href="/signin" className="font-medium text-indigo-600 hover:text-indigo-500">
            Войти в аккаунт
          </Link>
        </p>
      </div>
    </div>
  )
}


