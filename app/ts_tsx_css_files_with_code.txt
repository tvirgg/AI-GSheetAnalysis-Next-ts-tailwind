File: D:\ai_now\app\globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {

}

@media (prefers-color-scheme: dark) {
  :root {

  }
}
html{
  scrollbar-gutter: stable;
}
body {
  background: #F9FAFB;
}

@layer utilities {
  /* .text-balance {
    text-wrap: balance;
  } */
}


File: D:\ai_now\app\layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}


File: D:\ai_now\app\page.tsx
export default function HomePage () {
  return (
    <>
      <div>
        Home page
      </div>
    </>
  )
}


File: D:\ai_now\app\api\config.ts
export const API_BASE_URL = 'https://45.66.10.64:443';

File: D:\ai_now\app\api\login.ts
import cookie from 'cookie';

export default async function handler(req: { method: string; body: { email: any; password: any; }; }, res: { status: (arg0: number) => { (): any; new(): any; json: { (arg0: { message: any; }): void; new(): any; }; }; setHeader: (arg0: string, arg1: string) => void; }) {
  if (req.method !== 'POST') {
    res.status(405).json({ message: 'Метод не поддерживается' });
    return;
  }

  const { email, password } = req.body;

  try {
    const response = await fetch('https://your-backend-api.com/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email, password }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      return res.status(response.status).json({ message: errorData.message });
    }

    const data = await response.json();

    // Устанавливаем HttpOnly cookie с токеном
    res.setHeader(
      'Set-Cookie',
      cookie.serialize('token', data.token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        maxAge: 60 * 60 * 24, // 1 день
        path: '/',
      })
    );

    res.status(200).json({ message: 'Вход выполнен' });
  } catch (error) {
    res.status(500).json({ message: 'Ошибка подключения к серверу' });
  }
}

File: D:\ai_now\app\api\private\route.ts
// import { NextResponse } from "next/server"
 
// export const GET = auth(function GET(req) {
//   if (req.auth) return NextResponse.json(req.auth)
//   return NextResponse.json({ message: "Not authenticated" }, { status: 401 })
// })

File: D:\ai_now\app\api\[...nextauth]\route.ts
// import { handlers } from "@/auth" // Referring to the auth.ts we just created
// export const { GET, POST } = handlers

File: D:\ai_now\app\dashboard\page.tsx
'use client'

import { useState } from 'react'
import WelcomeNavigation from '@/components/WelcomeNavigation'
import Sidebar from '@/components/Sidebar'
import Navbar from '@/components/Navbar'

export default function StartPage () {
  const [sidebarOpen, setSidebarOpen] = useState(false)

  return (
    <div>
      <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />

      <div className="lg:pl-72">
        <Navbar setSidebarOpen={setSidebarOpen} />

        <main className="py-10">
          <div className="px-4 sm:px-6 lg:px-8">
            <WelcomeNavigation />
          </div>
        </main>
      </div>
    </div>
  )
}


File: D:\ai_now\app\dashboard\ai\page.tsx
'use client'

import { useState, FormEvent } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation' // Для перенаправления
import { API_BASE_URL } from 'baseapi/config' // Убедитесь, что путь правильный

export default function SigninPage() {
  const [message, setMessage] = useState<string>('') // Состояние для сообщений
  const [isLoading, setIsLoading] = useState<boolean>(false) // Состояние для загрузки
  const router = useRouter() // Для перенаправления

  const login = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    setMessage('')
    setIsLoading(true)

    console.log('Login function called')

    // Используем FormData для получения данных формы
    const formData = new FormData(event.currentTarget)
    const email = formData.get('email') as string
    const password = formData.get('password') as string

    console.log('Email:', email)
    console.log('Password:', password)
    console.log('API_BASE_URL:', API_BASE_URL)

    try {
      // Запрос на аутентификацию
      const loginResponse = await fetch(`${API_BASE_URL}/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email, password })
      })

      console.log('Login Response Status:', loginResponse.status)

      const loginResult = await loginResponse.json()
      console.log('Login Response:', loginResult)

      if (loginResponse.ok && loginResult.token) {
        // Сохранение токена в localStorage
        localStorage.setItem('token', loginResult.token)

        // Запрос к /user для получения данных пользователя
        const userResponse = await fetch(`${API_BASE_URL}/user`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${loginResult.token}` // Предполагая, что API использует Bearer Token
          }
        })

        console.log('User Response Status:', userResponse.status)

        const userResult = await userResponse.json()
        console.log('User Response:', userResult)

        if (userResponse.ok && userResult.user_data) {
          // Здесь вы можете сохранить данные пользователя в состоянии или контексте
          console.log('User Data:', userResult.user_data)
          setMessage('Вход выполнен успешно!')
          // Перенаправление пользователя на защищённую страницу
          router.push('/dashboard') // Замените '/dashboard' на нужный путь
        } else {
          setMessage(userResult.message || 'Не удалось получить данные пользователя.')
        }
      } else {
        setMessage(loginResult.message || 'Ошибка при входе.')
      }
    } catch (error) {
      console.error('Ошибка входа:', error)
      setMessage('Произошла ошибка. Пожалуйста, попробуйте позже.')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="flex min-h-full flex-1 flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="mt-10 sm:mx-auto sm:w-full sm:max-w-[480px]">
        <div className="bg-white px-6 py-12 shadow sm:rounded-lg sm:px-12">
          <div>
            <h2 className="text-2xl font-bold leading-9 tracking-tight text-gray-900">Вход в Панельку</h2>
            <div>Полноценный доступ к работе с сервисом</div>
          </div>

          {/* Отображение сообщений */}
          {message && (
            <div id="message" className={`mt-4 text-center text-sm ${message === 'Вход выполнен успешно!' ? 'text-green-600' : 'text-red-600'}`}>
              {message}
            </div>
          )}

          <form onSubmit={login} className="mt-6 space-y-6">
            <div>
              <div className="mt-2">
                <input
                  id="email"
                  name="email"
                  type="email"
                  placeholder="Ваш email"
                  required
                  autoComplete="email"
                  className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                />
              </div>
            </div>

            <div>
              <div className="mt-2">
                <input
                  id="password"
                  name="password"
                  type="password"
                  placeholder="Ваш пароль"
                  required
                  autoComplete="current-password"
                  className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                />
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600"
                />
                <label htmlFor="remember-me" className="ml-3 block text-sm leading-6 text-gray-900">
                  Запомнить меня
                </label>
              </div>

              <div className="text-sm leading-6">
                <a href="#" className="font-semibold text-indigo-600 hover:text-indigo-500">
                  Забыли пароль?
                </a>
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={isLoading}
                className={`flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 ${
                  isLoading ? 'opacity-50 cursor-not-allowed' : ''
                }`}
              >
                {isLoading ? 'Вход...' : 'Войти'}
              </button>
            </div>
          </form>

          <div>
            <div className="relative mt-10">
              <div aria-hidden="true" className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-200" />
              </div>
              <div className="relative flex justify-center text-sm font-medium leading-6">
                <span className="bg-white px-6 text-gray-900">Или войти через</span>
              </div>
            </div>

            <div className="mt-6 grid grid-cols-1 gap-4">
              <button
                type="button"
                onClick={() => { /* Реализуйте логику Google авторизации */ }}
                className="flex w-full items-center justify-center gap-3 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus-visible:ring-transparent"
              >
                <svg viewBox="0 0 24 24" aria-hidden="true" className="h-5 w-5">
                  {/* SVG содержимое */}
                </svg>
                <span className="text-sm font-semibold leading-6">Google</span>
              </button>

              {/* Аналогично для GitHub или других провайдеров */}
            </div>
          </div>
        </div>

        <p className="mt-10 text-center text-sm text-gray-500">
          Еще не зарегистрированы?{' '}
          <Link href="/signup" className="font-semibold leading-6 text-indigo-600 hover:text-indigo-500">
            Пройти регистрацию
          </Link>
        </p>
      </div>
    </div>
  )
}


File: D:\ai_now\app\dashboard\my\page.tsx
'use client'

import { useState, useEffect, Fragment } from 'react'
import { Dialog, Transition } from '@headlessui/react'
import { PlusIcon, TrashIcon, CircleStackIcon } from '@heroicons/react/24/outline'
import Sidebar from '@/components/Sidebar'
import Navbar from '@/components/Navbar'
import axios from 'axios'
import { API_BASE_URL } from 'baseapi/config'

// Функция для объединения классов
function classNames(...classes: Array<string>) {
  return classes.filter(Boolean).join(' ')
}

// Интерфейсы для типов данных
interface Graph {
  id: number
  timestamp: string
  prompt: string
  graph_html: string // base64
  is_up_to_date: boolean
}

interface DashboardData {
  display_name: string
  data: Array<Record<string, any>>
  columns: Array<string>
  descriptions: Record<string, string>
  graphs: Array<Graph>
}

// Предварительно закодированные тестовые данные
const TEST_DASHBOARD_DATA: DashboardData[] = [
  {
    display_name: 'Отчет о компании Б',
    data: [
      { column1: 'Value 1', column2: 'Value 2' },
      { column1: 'Value 3', column2: 'Value 4' },
    ],
    columns: ['column1', 'column2'],
    descriptions: {
      column1: 'Описание столбца 1',
      column2: 'Описание столбца 2',
    },
    graphs: [
      {
        id: 1,
        timestamp: '2024-04-01T12:00:00Z',
        prompt: 'График выручки',
        graph_html: 'PGRpdj4gSGFja2dyYXBoaWMgV3l1cmFja2kgPC9kaXY+', // <div>График Выручки</div>
        is_up_to_date: true,
      },
      {
        id: 2,
        timestamp: '2024-04-02T12:00:00Z',
        prompt: 'График прибыли',
        graph_html: 'PGRpdj4gSGFja2dyYXBoaWMgUGlyaWJpPC9kaXY+', // <div>График Прибыли</div>
        is_up_to_date: false,
      },
    ],
  },
  {
    display_name: 'Проекты в работе',
    data: [
      { column1: 'Проект A', column2: 'Завершен' },
      { column1: 'Проект B', column2: 'В процессе' },
    ],
    columns: ['column1', 'column2'],
    descriptions: {
      column1: 'Название проекта',
      column2: 'Статус',
    },
    graphs: [
      {
        id: 3,
        timestamp: '2024-04-03T12:00:00Z',
        prompt: 'График статусов проектов',
        graph_html: 'PGRpdj4gSGFja2dyYXBoaWMgU3RhdHVzPC9kaXY+', // <div>График Статусов Проектов</div>
        is_up_to_date: true,
      },
    ],
  },
]

export default function MyDashboard() {
  // Состояния для управления компонентом
  const [sidebarOpen, setSidebarOpen] = useState(false)
  const [isAddMetricOpen, setIsAddMetricOpen] = useState(false)
  const [currentSection, setCurrentSection] = useState<string>('')
  const [metricName, setMetricName] = useState('')
  const [startPeriod, setStartPeriod] = useState('')
  const [endPeriod, setEndPeriod] = useState('')
  const [source, setSource] = useState('')
  const [dashboardData, setDashboardData] = useState<DashboardData[]>([])
  const [isLoading, setIsLoading] = useState<boolean>(false)
  const [notification, setNotification] = useState<{ type: string; message: string } | null>(null)

  // Получение данных дэшборда при монтировании компонента
  useEffect(() => {
    fetchDashboardData()
  }, [])

  const fetchDashboardData = async () => {
    setIsLoading(true)
    try {
      const response = await axios.get(`${API_BASE_URL}/all_dashboards`, {
        headers: {
          'Content-Type': 'application/json',
        },
      })
      const data: DashboardData[] = response.data
      if (data.length === 0) {
        // Если данные пустые, используем тестовые данные
        setDashboardData(TEST_DASHBOARD_DATA)
      } else {
        setDashboardData(data)
      }
    } catch (err: any) {
      console.error(err)
      // В случае ошибки используем тестовые данные и показываем уведомление
      setDashboardData(TEST_DASHBOARD_DATA)
      setNotification({ type: 'error', message: 'Ошибка при загрузке данных дэшборда.' })
    } finally {
      setIsLoading(false)
    }
  }

  // Обработчик открытия модального окна для добавления показателя
  const openAddMetricModal = (section: string) => {
    setCurrentSection(section)
    setIsAddMetricOpen(true)
  }

  // Обработчик закрытия модального окна
  const closeAddMetricModal = () => {
    setIsAddMetricOpen(false)
    setMetricName('')
    setStartPeriod('')
    setEndPeriod('')
    setSource('')
    setCurrentSection('')
  }

  // Обработчик добавления показателя
  const handleAddMetric = async () => {
    // Логика отправки данных на сервер или другая обработка
    try {
      const payload = {
        section: currentSection,
        metric_name: metricName,
        start_period: startPeriod,
        end_period: endPeriod,
        source: source,
      }

      const response = await axios.post(`${API_BASE_URL}/add_metric`, payload)

      if (response.status === 200) {
        setNotification({ type: 'success', message: 'Показатель успешно добавлен.' })
        await fetchDashboardData()
        closeAddMetricModal()
      } else {
        throw new Error('Не удалось добавить показатель.')
      }
    } catch (err: any) {
      console.error(err)
      setNotification({ type: 'error', message: err.response?.data?.message || 'Ошибка при добавлении показателя.' })
    }
  }

  // Обработчик удаления графика
  const handleDeleteGraph = async (graphId: number, displayName: string) => {
    const confirmed = confirm('Вы действительно хотите удалить этот график?')
    if (!confirmed) return

    try {
      const response = await axios.post(`${API_BASE_URL}/delete_graph`, {
        graph_id: graphId,
        display_name: displayName,
      })

      if (response.status === 200 && response.data.status === 'success') {
        setNotification({ type: 'success', message: response.data.message })
        await fetchDashboardData()
      } else {
        throw new Error(response.data.message || 'Не удалось удалить график.')
      }
    } catch (err: any) {
      console.error(err)
      setNotification({ type: 'error', message: err.response?.data?.message || 'Что-то пошло не так.' })
    }
  }

  // Обработчик обновления графика
  const handleRefreshGraph = async (graphId: number, displayName: string) => {
    try {
      const response = await axios.post(`${API_BASE_URL}/refresh_graph`, {
        graph_id: graphId,
        display_name: displayName,
      })

      if (response.status === 200 && response.data.status === 'success') {
        setNotification({ type: 'success', message: response.data.message })
        await fetchDashboardData()
      } else {
        throw new Error(response.data.message || 'Не удалось обновить график.')
      }
    } catch (err: any) {
      console.error(err)
      setNotification({ type: 'error', message: err.response?.data?.message || 'Что-то пошло не так.' })
    }
  }

  // Автоматически скрывать уведомление через 5 секунд
  useEffect(() => {
    if (notification) {
      const timer = setTimeout(() => {
        setNotification(null)
      }, 5000)

      return () => clearTimeout(timer)
    }
  }, [notification])

  return (
    <div>
      {/* Sidebar */}
      <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />

      <div className="lg:pl-72">
        {/* Navbar */}
        <Navbar setSidebarOpen={setSidebarOpen} />

        {/* Основной контент страницы */}
        <main className="py-10">
          <div className="px-4 sm:px-6 lg:px-8">
            {/* Уведомления */}
            {notification && (
              <div className="mt-4">
                <div
                  className={`rounded-md p-4 ${
                    notification.type === 'success' ? 'bg-green-100' : 'bg-red-100'
                  }`}
                >
                  <div className="flex">
                    <div className="ml-3">
                      <p
                        className={`text-sm font-medium ${
                          notification.type === 'success' ? 'text-green-800' : 'text-red-800'
                        }`}
                      >
                        {notification.message}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Обработка состояния загрузки */}
            {isLoading && (
              <div className="flex justify-center items-center h-64">
                <p className="text-gray-500">Загрузка данных...</p>
              </div>
            )}

            {/* Отображение данных дэшборда */}
            {!isLoading && dashboardData.map((section) => (
              <section key={section.display_name} className="mt-12">
                <div className="mt-2 md:flex md:items-center md:justify-between">
                  <div className="min-w-0 flex-1">
                    <h2 className="text-2xl font-bold leading-7 text-gray-900 sm:truncate sm:text-3xl sm:tracking-tight">
                      {section.display_name}
                    </h2>
                  </div>
                  <div className="mt-4 flex flex-shrink-0 md:ml-4 md:mt-0">
                    <button
                      type="button"
                      onClick={() => openAddMetricModal(section.display_name)}
                      className="inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                    >
                      <PlusIcon aria-hidden="true" className="h-5 w-5" />
                    </button>
                  </div>
                </div>

                {/* Отображение графиков */}
                <div className="mt-4 grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {section.graphs.length > 0 ? (
                    section.graphs.map((graph) => (
                      <div key={graph.id} className="relative bg-white p-4 rounded-lg shadow flex flex-col">
                        {/* Кнопка удаления графика */}
                        <button
                          onClick={() => handleDeleteGraph(graph.id, section.display_name)}
                          className="absolute top-2 right-2 text-red-500 hover:text-red-700"
                          aria-label="Удалить график"
                        >
                          <TrashIcon className="h-5 w-5" />
                        </button>

                        {/* Кнопка обновления графика */}
                        <button
                          onClick={() => handleRefreshGraph(graph.id, section.display_name)}
                          className="absolute top-2 left-2 text-indigo-500 hover:text-indigo-700"
                          aria-label="Обновить график"
                        >
                          <CircleStackIcon className="h-5 w-5" />
                        </button>

                        {/* Отображение графика через iframe */}
                        <div className="flex-1">
                          <iframe
                            srcDoc={atob(graph.graph_html)}
                            style={{
                              width: '100%',
                              height: '500px', // Установленная фиксированная высота
                              border: 'none',
                              overflow: 'hidden',
                            }}
                            title={graph.prompt}
                            sandbox="allow-scripts allow-same-origin"
                          />
                        </div>

                        <p className="mt-2 text-sm text-gray-500">{graph.prompt}</p>
                      </div>
                    ))
                  ) : (
                    <div className="col-span-full text-center p-4 text-gray-500">
                      Показатели отсутствуют. Нажмите на кнопку{' '}
                      <PlusIcon aria-hidden="true" className="inline h-5 w-5" /> справа, чтобы добавить.
                    </div>
                  )}
                </div>
              </section>
            ))}

            {/* Модальное окно для добавления показателя */}
            <Transition.Root show={isAddMetricOpen} as={Fragment}>
              <Dialog as="div" className="relative z-10" onClose={closeAddMetricModal}>
                {/* Затемняющий фон */}
                <Transition.Child
                  as={Fragment}
                  enter="ease-out duration-300"
                  enterFrom="opacity-0"
                  enterTo="opacity-100"
                  leave="ease-in duration-200"
                  leaveFrom="opacity-100"
                  leaveTo="opacity-0"
                >
                  <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
                </Transition.Child>

                {/* Контейнер модального окна */}
                <div className="fixed inset-0 z-10 overflow-y-auto">
                  <div className="flex min-h-full items-center justify-center p-4 text-center">
                    <Transition.Child
                      as={Fragment}
                      enter="ease-out duration-300"
                      enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                      enterTo="opacity-100 translate-y-0 sm:scale-100"
                      leave="ease-in duration-200"
                      leaveFrom="opacity-100 translate-y-0 sm:scale-100"
                      leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                    >
                      <Dialog.Panel className="relative transform overflow-hidden rounded-lg bg-white px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                        {/* Заголовок модального окна */}
                        <Dialog.Title
                          as="h3"
                          className="text-lg leading-6 font-medium text-gray-900 text-center"
                        >
                          Какой показатель вы хотите добавить?
                        </Dialog.Title>
                        <div className="mt-5">
                          {/* Поле ввода названия показателя */}
                          <div className="mb-4">
                            <label htmlFor="metricName" className="block text-sm font-medium text-gray-700">
                              Название показателя
                            </label>
                            <input
                              id="metricName"
                              type="text"
                              required
                              placeholder="Например, выручка, прибыль, проданные товары"
                              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                              value={metricName}
                              onChange={(e) => setMetricName(e.target.value)}
                            />
                          </div>

                          {/* Выбор периода */}
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-700">
                              За какой период отразить показатель
                            </label>
                            <div className="mt-1 grid grid-cols-2 gap-4">
                              {/* Начало периода */}
                              <div>
                                <label htmlFor="startPeriod" className="block text-sm font-medium text-gray-700">
                                  Начало периода
                                </label>
                                <input
                                  id="startPeriod"
                                  type="date"
                                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                  value={startPeriod}
                                  onChange={(e) => setStartPeriod(e.target.value)}
                                />
                              </div>
                              {/* Конец периода */}
                              <div>
                                <label htmlFor="endPeriod" className="block text-sm font-medium text-gray-700">
                                  Конец периода
                                </label>
                                <input
                                  id="endPeriod"
                                  type="date"
                                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                  value={endPeriod}
                                  onChange={(e) => setEndPeriod(e.target.value)}
                                />
                              </div>
                            </div>
                          </div>

                          {/* Выбор источника */}
                          <div className="mb-4">
                            <label htmlFor="source" className="block text-sm font-medium text-gray-700">
                              Источники для расчета показателя
                            </label>
                            <select
                              id="source"
                              className="mt-1 block w-full rounded-md border-gray-300 bg-white shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                              value={source}
                              onChange={(e) => setSource(e.target.value)}
                            >
                              <option value="">Выберите источник</option>
                              {dashboardData.map((section) => (
                                <option key={section.display_name} value={section.display_name}>
                                  {section.display_name}
                                </option>
                              ))}
                              {/* Добавьте другие источники по необходимости */}
                            </select>
                          </div>

                          {/* Кнопка добавления показателя */}
                          <div className="mt-5 sm:mt-6">
                            <button
                              type="button"
                              disabled={!metricName || !startPeriod || !endPeriod || !source}
                              className={classNames(
                                metricName && startPeriod && endPeriod && source
                                  ? 'bg-indigo-600 hover:bg-indigo-700'
                                  : 'bg-indigo-300 cursor-not-allowed',
                                'w-full inline-flex justify-center rounded-md border border-transparent px-4 py-2 text-base font-medium text-white shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:text-sm'
                              )}
                              onClick={handleAddMetric}
                            >
                              Добавить показатель
                            </button>
                          </div>
                        </div>
                      </Dialog.Panel>
                    </Transition.Child>
                  </div>
                </div>
              </Dialog>
            </Transition.Root>
            {/* Конец модального окна */}
          </div>
        </main>
      </div>
    </div>
  )
}


File: D:\ai_now\app\dashboard\profile_settings\page.tsx
'use client'

import { useState, useEffect } from 'react'
import { UserIcon, KeyIcon, PhotoIcon, PencilIcon, CheckIcon } from '@heroicons/react/24/outline'
import Sidebar from '@/components/Sidebar'
import Navbar from '@/components/Navbar'
import axios from 'axios'
import { API_BASE_URL } from 'baseapi/config'

interface UserProfile {
  firstName: string
  lastName: string
  email: string
  password: string
  profilePicture: string
}

const initialProfile = {
  firstName: '',
  lastName: '',
  email: '',
  password: '',
  profilePicture: '',
}

export default function ProfilePage() {
  const [profile, setProfile] = useState<UserProfile>(initialProfile)
  const [isEditing, setIsEditing] = useState(false)
  const [isLoading, setIsLoading] = useState(false)

  useEffect(() => {
    fetchProfileData()
  }, [])

  const fetchProfileData = async () => {
    setIsLoading(true)
    try {
      const response = await axios.get(`${API_BASE_URL}/profile`)
      setProfile(response.data)
    } catch (err) {
      console.error('Ошибка при загрузке профиля:', err)
    } finally {
      setIsLoading(false)
    }
  }

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setProfile({ ...profile, [name]: value })
  }

  const handleSaveChanges = async () => {
    setIsLoading(true)
    try {
      const response = await axios.put(`${API_BASE_URL}/profile`, profile)
      if (response.status === 200) {
        setIsEditing(false)
        alert('Профиль успешно обновлен!')
      }
    } catch (err) {
      console.error('Ошибка при сохранении профиля:', err)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div>
      <Sidebar />
      <div className="lg:pl-72">
        <Navbar />
        <main className="py-10">
          <div className="px-4 sm:px-6 lg:px-8">
            <div className="mt-6 max-w-3xl mx-auto bg-white shadow sm:rounded-lg">
              {isLoading ? (
                <p>Загрузка...</p>
              ) : (
                <form className="space-y-6">
                  {/* Имя */}
                  <div className="flex items-center">
                    <UserIcon className="h-6 w-6 text-gray-400" />
                    <input
                      type="text"
                      name="firstName"
                      value={profile.firstName}
                      onChange={handleInputChange}
                      disabled={!isEditing}
                      className="ml-3 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                      placeholder="Имя"
                    />
                  </div>

                  {/* Фамилия */}
                  <div className="flex items-center">
                    <UserIcon className="h-6 w-6 text-gray-400" />
                    <input
                      type="text"
                      name="lastName"
                      value={profile.lastName}
                      onChange={handleInputChange}
                      disabled={!isEditing}
                      className="ml-3 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                      placeholder="Фамилия"
                    />
                  </div>

                  {/* Почта */}
                  <div className="flex items-center">
                    <UserIcon className="h-6 w-6 text-gray-400" />
                    <input
                      type="email"
                      name="email"
                      value={profile.email}
                      onChange={handleInputChange}
                      disabled={!isEditing}
                      className="ml-3 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                      placeholder="Почта"
                    />
                  </div>

                  {/* Пароль */}
                  <div className="flex items-center">
                    <KeyIcon className="h-6 w-6 text-gray-400" />
                    <input
                      type="password"
                      name="password"
                      value={profile.password}
                      onChange={handleInputChange}
                      disabled={!isEditing}
                      className="ml-3 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                      placeholder="Пароль"
                    />
                  </div>

                  {/* Фото профиля */}
                  <div className="flex items-center">
                    <PhotoIcon className="h-6 w-6 text-gray-400" />
                    <input
                      type="text"
                      name="profilePicture"
                      value={profile.profilePicture}
                      onChange={handleInputChange}
                      disabled={!isEditing}
                      className="ml-3 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                      placeholder="Ссылка на фото"
                    />
                  </div>

                  {/* Кнопки */}
                  <div className="flex justify-between">
                    {isEditing ? (
                      <button
                        type="button"
                        onClick={handleSaveChanges}
                        className="inline-flex items-center px-4 py-2 bg-green-500 text-white rounded-md shadow-sm"
                      >
                        <CheckIcon className="h-5 w-5 mr-2" />
                        Сохранить
                      </button>
                    ) : (
                      <button
                        type="button"
                        onClick={() => setIsEditing(true)}
                        className="inline-flex items-center px-4 py-2 bg-blue-500 text-white rounded-md shadow-sm"
                      >
                        <PencilIcon className="h-5 w-5 mr-2" />
                        Изменить
                      </button>
                    )}
                  </div>
                </form>
              )}
            </div>
          </div>
        </main>
      </div>
    </div>
  )
}


File: D:\ai_now\app\dashboard\reports\page.tsx
'use client'

import { useState, useEffect, Fragment } from 'react'
import { Dialog, Transition } from '@headlessui/react'
import {
  ArrowDownTrayIcon,
  DocumentIcon,
  PlayCircleIcon,
} from '@heroicons/react/24/outline'
import Sidebar from '@/components/Sidebar'
import Navbar from '@/components/Navbar'
import axios from 'axios'
import { API_BASE_URL } from 'baseapi/config'; // Используем новый алиас

// Функция для объединения классов
function classNames(...classes: Array<string>) {
  return classes.filter(Boolean).join(' ')
}

// Функция для преобразования индекса в буквенное обозначение колонки (A, B, ..., Z, AA, AB, ...)
function getColumnLabel(index: number): string {
  let label = ''
  let temp = index + 1
  while (temp > 0) {
    let modulo = (temp - 1) % 26
    label = String.fromCharCode(65 + modulo) + label
    temp = Math.floor((temp - modulo) / 26)
  }
  return label
}

// Определение интерфейса для вкладок
interface Tab {
  name: string
  href: string
  current: boolean
}

// Определение интерфейса для метаданных таблицы
interface TableMetadata {
  table_name: string
  display_name: string
  table_type: 'excel' | 'google'
  last_updated: string // ISO формат
}

// Данные для вкладок
const initialTabs: Array<Tab> = [
  { name: 'Excel', href: '#', current: true },
  { name: 'Google таблицы', href: '#', current: false },
  // { name: 'API (В разработке)', href: '#', current: false }, // В разработке
]

export default function ReportsPage() {
  // Состояния для управления компонентом
  const [sidebarOpen, setSidebarOpen] = useState(false)
  const [isOpen, setIsOpen] = useState(false)
  const [isEditColumnsOpen, setIsEditColumnsOpen] = useState(false)
  const [uploadedFileName, setUploadedFileName] = useState('')
  const [reportType, setReportType] = useState('Управленческий отчет')
  const [reportName, setReportName] = useState('')
  const [currentTabs, setCurrentTabs] = useState(initialTabs)
  const [googleSheetURL, setGoogleSheetURL] = useState('')

  // Состояния для данных таблиц
  const [tables, setTables] = useState<TableMetadata[]>([]) // Инициализируем пустым массивом
  const [loading, setLoading] = useState<boolean>(false)

  // Состояния для уведомлений
  const [notification, setNotification] = useState<{ type: string; message: string } | null>(null)

  // Состояние для текущей таблицы, которую редактируют (пока можно оставить null или использовать другой интерфейс)
  const [currentEditingTable, setCurrentEditingTable] = useState<TableMetadata | null>(null)

  // Определение текущего выбранного таба
  const currentTab = currentTabs.find((tab) => tab.current)?.name

  // Получение списка таблиц при монтировании компонента
  useEffect(() => {
    fetchTables()
  }, [])

  const fetchTables = async () => {
    setLoading(true)
    try {
      const response = await axios.get(`${API_BASE_URL}/tables`)
      const data = response.data
      if (data.tables && Array.isArray(data.tables)) {
        setTables(data.tables)
      } else {
        setNotification({ type: 'error', message: 'Некорректный формат данных от сервера.' })
      }
    } catch (err: any) {
      console.error(err)
      setNotification({ type: 'error', message: 'Ошибка при загрузке таблиц.' })
    } finally {
      setLoading(false)
    }
  }

  // Обработчик выбора файла
  const handleFileSelect = () => {
    const input = document.createElement('input')
    input.type = 'file'
    input.accept = '.xlsx, .xls, .csv' // Ограничение типов файлов (по желанию)
    input.onchange = (e: Event) => {
      const target = e.target as HTMLInputElement
      const file = target.files && target.files[0]
      if (file) {
        setUploadedFileName(file.name)
        // Дополнительная обработка файла (например, загрузка на сервер)
      }
    }
    input.click()
  }

  // Обработчик добавления отчета
  const handleAddReport = async () => {
    try {
      if (currentTab === 'Excel') {
        // Логика загрузки файла Excel на сервер
        // Например, использование FormData
        const formData = new FormData()
        // Предположим, что у вас есть файл, который нужно загрузить
        // Но в текущем коде файл только выбран, не загружен
        // Поэтому необходимо реализовать логику загрузки

        // Пример:
        // formData.append('file', selectedFile)

        // const response = await axios.post(`${API_BASE_URL}/upload_excel`, formData, {
        //   headers: {
        //     'Content-Type': 'multipart/form-data',
        //   },
        // })

        // Если API для загрузки файла отсутствует, можно оставить заглушку

        // Для демонстрации создадим новую таблицу локально
        const newTable: TableMetadata = {
          table_name: `table_${Date.now()}`,
          display_name: reportName || 'Новый Excel отчет',
          table_type: 'excel',
          last_updated: new Date().toISOString(),
        }

        // Добавляем таблицу в список
        setTables([...tables, newTable])
        setNotification({ type: 'success', message: 'Таблица успешно добавлена.' })
        setIsOpen(false)
        setUploadedFileName('')
        setReportName('')
      } else if (currentTab === 'Google таблицы') {
        // Логика добавления Google таблицы через API
        const payload = {
          google_sheet_url: googleSheetURL,
          display_name: reportName || 'Новый Google отчет',
          report_type: reportType,
        }

        // Отправляем запрос на сервер для добавления Google таблицы
        const response = await axios.post(`${API_BASE_URL}/add_google_table`, payload)

        if (response.status === 200) {
          const newTable: TableMetadata = response.data.table
          setTables([...tables, newTable])
          setNotification({ type: 'success', message: 'Google таблица успешно добавлена.' })
          setIsOpen(false)
          setGoogleSheetURL('')
          setReportName('')
        } else {
          throw new Error('Не удалось добавить Google таблицу.')
        }
      }
    } catch (err: any) {
      console.error(err)
      setNotification({ type: 'error', message: err.response?.data?.message || 'Ошибка при добавлении отчета.' })
    }
  }

  // Обработчик переключения вкладок
  const handleTabClick = (selectedTabName: string) => {
    const updatedTabs = currentTabs.map((tab) => ({
      ...tab,
      current: tab.name === selectedTabName,
    }))
    setCurrentTabs(updatedTabs)
  }

  // Фильтрация таблиц по типу
  const filteredTables = tables.filter((table) => {
    if (currentTab === 'Excel') return table.table_type === 'excel'
    if (currentTab === 'Google таблицы') return table.table_type === 'google'
    return false
  })

  // Обработчик обновления таблицы (для всех типов)
  const handleUpdateTable = async (table_name: string) => {
    try {
      setLoading(true)
      // Логика обновления таблицы через API
      const response = await axios.get(`${API_BASE_URL}/tables/${table_name}`)

      if (response.status === 200) {
        setNotification({ type: 'success', message: 'Таблица успешно обновлена.' })
        // Возможно, нужно обновить конкретную таблицу в состоянии
        // Например, перезагрузить список таблиц
        await fetchTables()
      } else {
        throw new Error('Не удалось обновить таблицу.')
      }
    } catch (err: any) {
      console.error(err)
      setNotification({ type: 'error', message: err.response?.data?.message || 'Ошибка при обновлении таблицы.' })
    } finally {
      setLoading(false)
    }
  }

  // Обработчик удаления таблицы
  const handleDeleteTable = async (table_name: string) => {
    if (!confirm('Вы уверены, что хотите удалить эту таблицу?')) return

    try {
      setLoading(true)
      // Логика удаления таблицы через API
      const response = await axios.delete(`${API_BASE_URL}/tables/${table_name}`)

      if (response.status === 200 && response.data.status === 'success') {
        // Удалить таблицу из состояния
        setTables(tables.filter((table) => table.table_name !== table_name))

        // Показать уведомление об успешном удалении
        setNotification({ type: 'success', message: 'Таблица успешно удалена.' })
      } else {
        throw new Error(response.data.message || 'Не удалось удалить таблицу.')
      }
    } catch (err: any) {
      console.error(err)
      setNotification({ type: 'error', message: err.response?.data?.message || 'Ошибка при удалении таблицы.' })
    } finally {
      setLoading(false)
    }
  }

  // Автоматически скрывать уведомление через 5 секунд
  useEffect(() => {
    if (notification) {
      const timer = setTimeout(() => {
        setNotification(null)
      }, 5000)

      return () => clearTimeout(timer)
    }
  }, [notification])

  return (
    <div>
      {/* Sidebar */}
      <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />

      <div className="lg:pl-72">
        {/* Navbar */}
        <Navbar setSidebarOpen={setSidebarOpen} />

        {/* Основной контент страницы */}
        <main className="py-10">
          <div className="px-4 sm:px-6 lg:px-8">
            {/* Заголовок страницы */}
            <div>
              <h2 className="text-2xl font-bold leading-7 text-gray-900 sm:truncate sm:text-3xl sm:tracking-tight">
                Загрузить отчеты
              </h2>
            </div>

            {/* Уведомления */}
            {notification && (
              <div className="mt-4">
                <div
                  className={`rounded-md p-4 ${
                    notification.type === 'success' ? 'bg-green-100' : 'bg-red-100'
                  }`}
                >
                  <div className="flex">
                    <div className="ml-3">
                      <p
                        className={`text-sm font-medium ${
                          notification.type === 'success' ? 'text-green-800' : 'text-red-800'
                        }`}
                      >
                        {notification.message}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Вкладки для переключения типов отчетов */}
            <div className="mt-10">
              {/* Вкладки для мобильных устройств */}
              <div className="sm:hidden">
                <label htmlFor="tabs" className="sr-only">
                  Выберите вкладку
                </label>
                <select
                  id="tabs"
                  name="tabs"
                  value={currentTab}
                  onChange={(e) => handleTabClick(e.target.value)}
                  className="block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                >
                  {currentTabs.map((tab) => (
                    <option key={tab.name} value={tab.name}>
                      {tab.name}
                    </option>
                  ))}
                </select>
              </div>
              {/* Вкладки для настольных устройств */}
              <div className="hidden sm:block">
                <div className="border-b border-gray-200">
                  <nav aria-label="Tabs" className="-mb-px flex space-x-8">
                    {currentTabs.map((tab) => (
                      <button
                        key={tab.name}
                        onClick={() => handleTabClick(tab.name)}
                        className={classNames(
                          tab.current
                            ? 'border-indigo-500 text-indigo-600'
                            : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700',
                          'whitespace-nowrap border-b-2 px-1 py-4 text-sm font-medium'
                        )}
                      >
                        {tab.name}
                      </button>
                    ))}
                  </nav>
                </div>
              </div>
            </div>

            {/* Кнопки действий */}
            <div>
              <div className="mt-6 flex gap-4">
                {currentTab === 'Excel' && (
                  <button
                    type="button"
                    onClick={() => setIsOpen(true)}
                    className="inline-flex items-center gap-x-1.5 rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                  >
                    <ArrowDownTrayIcon aria-hidden="true" className="-ml-0.5 h-5 w-5" />
                    Загрузить файл
                  </button>
                )}

                {currentTab === 'Google таблицы' && (
                  <button
                    type="button"
                    onClick={() => setIsOpen(true)}
                    className="inline-flex items-center gap-x-1.5 rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                  >
                    <ArrowDownTrayIcon aria-hidden="true" className="-ml-0.5 h-5 w-5" />
                    Загрузить гугл таблицу
                  </button>
                )}

                {/* Кнопки для примера файла и видео инструкции */}
                <button
                  type="button"
                  className="inline-flex items-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                >
                  <DocumentIcon aria-hidden="true" className="-ml-0.5 h-5 w-5" />
                  Пример файла
                </button>

                <button
                  type="button"
                  className="inline-flex items-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                >
                  <PlayCircleIcon aria-hidden="true" className="-ml-0.5 h-5 w-5" />
                  Видео инструкция
                </button>
              </div>
            </div>

            {/* Таблица отчетов */}
            <div className="mt-8 flow-root">
              <div className="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
                <div className="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
                  <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg">
                    <table className="min-w-full divide-y divide-gray-300">
                      <thead className="bg-gray-50">
                        <tr>
                          {/* Столбец "Имя" */}
                          <th
                            scope="col"
                            className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6"
                          >
                            Имя
                          </th>
                          <th
                            scope="col"
                            className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                          >
                            Тип отчета
                          </th>
                          <th
                            scope="col"
                            className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                          >
                            Статус
                          </th>
                          <th
                            scope="col"
                            className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                          >
                            Действия
                          </th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200 bg-white">
                        {loading && (
                          <tr>
                            <td colSpan={4} className="py-4 text-center text-sm text-gray-500">
                              Загрузка таблиц...
                            </td>
                          </tr>
                        )}
                        {!loading && filteredTables.length === 0 && (
                          <tr>
                            <td colSpan={4} className="py-4 text-center text-sm text-gray-500">
                              Нет доступных таблиц.
                            </td>
                          </tr>
                        )}
                        {!loading &&
                          filteredTables.map((table) => (
                            <tr key={table.table_name}>
                              {/* Столбец "Имя" */}
                              <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">
                                {table.display_name}
                              </td>
                              <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-700 capitalize">
                                {table.table_type === 'excel' ? 'Excel' : 'Google Таблицы'}
                              </td>
                              <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-700">
                                Подключен к дашбоарду
                              </td>
                              <td className="relative whitespace-nowrap py-4 pl-3 pr-4 text-sm font-medium sm:pr-6 flex gap-4">
                                {/* Кнопка "Обновить" */}
                                <button
                                  onClick={() => handleUpdateTable(table.table_name)}
                                  className="text-blue-600 hover:underline"
                                >
                                  Обновить
                                </button>

                                {/* Кнопка "Удалить" */}
                                <button
                                  onClick={() => handleDeleteTable(table.table_name)}
                                  className="text-red-600 hover:underline"
                                >
                                  Удалить
                                </button>
                              </td>
                            </tr>
                          ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </main>

        {/* Модальное окно для добавления отчета */}
        <Transition.Root show={isOpen} as={Fragment}>
          <Dialog as="div" className="relative z-10" onClose={setIsOpen}>
            {/* Затемняющий фон */}
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0"
              enterTo="opacity-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100"
              leaveTo="opacity-0"
            >
              <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
            </Transition.Child>

            {/* Контейнер модального окна */}
            <div className="fixed inset-0 z-10 overflow-y-auto">
              <div className="flex min-h-full items-center justify-center p-4 text-center">
                <Transition.Child
                  as={Fragment}
                  enter="ease-out duration-300"
                  enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                  enterTo="opacity-100 translate-y-0 sm:scale-100"
                  leave="ease-in duration-200"
                  leaveFrom="opacity-100 translate-y-0 sm:scale-100"
                  leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                >
                  <Dialog.Panel className="relative transform overflow-hidden rounded-lg bg-white px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                    {/* Заголовок модального окна */}
                    <Dialog.Title
                      as="h3"
                      className="text-lg leading-6 font-medium text-gray-900 text-center"
                    >
                      {currentTab === 'Excel' ? 'Добавление отчета' : 'Добавление Google таблицы'}
                    </Dialog.Title>
                    <div className="mt-5">
                      {/* Раздел загрузки файла или ввода ссылки */}
                      {currentTab === 'Excel' && (
                        <div className="mb-4">
                          <label className="block text-sm font-medium text-gray-700">
                            Загруженный файл
                          </label>
                          <div className="mt-1 flex">
                            <input
                              type="text"
                              className="block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"
                              value={uploadedFileName}
                              placeholder="Файл не выбран"
                              disabled
                            />
                            <button
                              type="button"
                              className="ml-2 inline-flex items-center px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                              onClick={handleFileSelect}
                            >
                              Выбрать файл
                            </button>
                          </div>
                        </div>
                      )}

                      {currentTab === 'Google таблицы' && (
                        <div className="mb-4">
                          <label className="block text-sm font-medium text-gray-700">
                            Ссылка на Google таблицу
                          </label>
                          <input
                            type="url"
                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"
                            placeholder="Вставьте ссылку на Google таблицу"
                            value={googleSheetURL}
                            onChange={(e) => setGoogleSheetURL(e.target.value)}
                          />
                        </div>
                      )}

                      {/* Выпадающий список типа отчета */}
                      <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-700">
                          Тип отчета
                        </label>
                        <select
                          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"
                          value={reportType}
                          onChange={(e) => setReportType(e.target.value)}
                        >
                          <option>Управленческий отчет</option>
                          <option>Отчет по продажам / маркетингу</option>
                          <option>Отчет по персоналу</option>
                          <option>Отчет по проектам</option>
                          <option>Другой</option>
                        </select>
                      </div>

                      {/* Поле названия отчета */}
                      <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-700">
                          Название отчета
                        </label>
                        <input
                          type="text"
                          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"
                          placeholder="Например, о прибылях и убытках, о продажах и тд"
                          value={reportName}
                          onChange={(e) => setReportName(e.target.value)}
                        />
                      </div>

                      {/* Кнопка действия */}
                      <div className="mt-5 sm:mt-6">
                        <button
                          type="button"
                          className="inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:text-sm"
                          onClick={handleAddReport}
                        >
                          Добавить отчет
                        </button>
                      </div>
                    </div>
                  </Dialog.Panel>
                </Transition.Child>
              </div>
            </div>
          </Dialog>
        </Transition.Root>
        {/* Конец модального окна для добавления отчета */}

        {/* Модальное окно для редактирования колонок */}
        {/* Поскольку мы теперь получаем только метаданные таблиц, редактирование колонок требует дополнительной реализации */}
        {/* Например, нужно создать отдельный API-эндпоинт для получения и обновления колонок таблицы */}
        {/* Пока оставим модальное окно без функционала или реализуем локально */}

        {/* Если необходимо редактировать метаданные таблицы (например, display_name), можно реализовать это здесь */}
        {/* Пример: */}
        <Transition.Root show={isEditColumnsOpen} as={Fragment}>
          <Dialog as="div" className="relative z-10" onClose={setIsEditColumnsOpen}>
            {/* Затемняющий фон */}
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0"
              enterTo="opacity-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100"
              leaveTo="opacity-0"
            >
              <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
            </Transition.Child>

            {/* Контейнер модального окна */}
            <div className="fixed inset-0 z-10 overflow-y-auto">
              <div className="flex min-h-full items-center justify-center p-4 text-center">
                <Transition.Child
                  as={Fragment}
                  enter="ease-out duration-300"
                  enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                  enterTo="opacity-100 translate-y-0 sm:scale-100"
                  leave="ease-in duration-200"
                  leaveFrom="opacity-100 translate-y-0 sm:scale-100"
                  leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                >
                  <Dialog.Panel className="relative transform overflow-hidden rounded-lg bg-white px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-4xl sm:p-6">
                    {/* Заголовок модального окна */}
                    <Dialog.Title
                      as="h3"
                      className="text-lg leading-6 font-medium text-gray-900 text-center"
                    >
                      Редактирование таблицы: {currentEditingTable?.display_name}
                    </Dialog.Title>
                    <div className="mt-5">
                      {/* Здесь можно реализовать редактирование метаданных таблицы */}
                      {/* Например, изменить display_name */}
                      {currentEditingTable && (
                        <div>
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-700">
                              Название отчета
                            </label>
                            <input
                              type="text"
                              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"
                              value={currentEditingTable.display_name}
                              onChange={(e) => {
                                const updatedTable: TableMetadata = {
                                  ...currentEditingTable,
                                  display_name: e.target.value,
                                }
                                setCurrentEditingTable(updatedTable)
                              }}
                            />
                          </div>

                          {/* Дополнительные поля для редактирования можно добавить здесь */}

                          {/* Кнопки действия */}
                          <div className="mt-6 flex justify-end space-x-3">
                            <button
                              type="button"
                              className="inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                              onClick={() => setIsEditColumnsOpen(false)}
                            >
                              Отмена
                            </button>
                            <button
                              type="button"
                              className="inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-sm font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                              onClick={async () => {
                                // Логика обновления таблицы через API
                                try {
                                  const payload = {
                                    display_name: currentEditingTable.display_name,
                                  }

                                  const response = await axios.put(`${API_BASE_URL}/tables/${currentEditingTable.table_name}`, payload)

                                  if (response.status === 200) {
                                    setNotification({ type: 'success', message: 'Таблица успешно обновлена.' })
                                    setIsEditColumnsOpen(false)
                                    await fetchTables()
                                  } else {
                                    throw new Error('Не удалось обновить таблицу.')
                                  }
                                } catch (err: any) {
                                  console.error(err)
                                  setNotification({ type: 'error', message: err.response?.data?.message || 'Ошибка при обновлении таблицы.' })
                                }
                              }}
                            >
                              Подтвердить
                            </button>
                          </div>
                        </div>
                      )}
                    </div>
                  </Dialog.Panel>
                </Transition.Child>
              </div>
            </div>
          </Dialog>
        </Transition.Root>
        {/* Конец модального окна для редактирования таблицы */}
      </div>
    </div>
  )
}


File: D:\ai_now\app\lib\actions.ts
'use server'
import { signIn } from "@/auth";

async function sleep (ms: number) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

export async function createTodo(prevState: any, formData: FormData) {  
  try {
    await sleep(2000)
    return { message: 'Created' }
  } catch (e) {
    return { message: 'Failed to create' }
  }
}

export async function authorization (formData: FormData) {  
  await signIn('credentials', formData)
}

export async function googleAuthorization () {  
  await signIn('google')
}

File: D:\ai_now\app\lib\prisma.ts
import { PrismaClient } from "@prisma/client"

const prisma = new PrismaClient({
  log: [
    // {
    //   emit: 'stdout',
    //   level: 'query'
    // },
    {
      emit: 'stdout',
      level: 'error'
    },
    {
      emit: 'stdout',
      level: 'info'
    },
    {
      emit: 'stdout',
      level: 'warn'
    }
  ]
})


export default prisma

File: D:\ai_now\app\signin\page.tsx
// pages/api/login.ts
import cookie from 'cookie';
import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import { NextApiRequest, NextApiResponse } from 'next';

const authConfig = {
  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: "Email", type: "text" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        try {
          const res = await fetch('https://your-backend-api.com/auth/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              email: credentials?.email,
              password: credentials?.password,
            }),
          });

          const user = await res.json();

          if (res.ok && user) {
            return user;
          }

          return null;
        } catch (error) {
          console.error("Ошибка авторизации", error);
          return null;
        }
      },
    }),
  ],
  pages: {
    signIn: '/signin',
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.email = user.email;
      }
      return token;
    },
    async session({ session, token }) {
      session.user.id = token.id as string;
      session.user.email = token.email as string;
      return session;
    }
  },
  secret: process.env.NEXTAUTH_SECRET,
  session: {
    strategy: 'jwt',
  },
};

export default NextAuth(authConfig);

// Устанавливаем HttpOnly cookie с токеном
export async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    res.status(405).json({ message: 'Метод не поддерживается' });
    return;
  }

  const { email, password } = req.body;

  try {
    const response = await fetch('https://your-backend-api.com/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email, password }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      return res.status(response.status).json({ message: errorData.message });
    }

    const data = await response.json();

    res.setHeader(
      'Set-Cookie',
      cookie.serialize('token', data.token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        maxAge: 60 * 60 * 24,
        path: '/',
      })
    );

    res.status(200).json({ message: 'Вход выполнен' });
  } catch (error) {
    res.status(500).json({ message: error instanceof Error ? error.message : 'Ошибка подключения к серверу' });
  }
}

export { handler as middleware } from "@/auth";

export const config = {
  matcher: ['/((?!api|_next/static|_next/image|.*\.png$).*)'],
};

File: D:\ai_now\app\signup\page.tsx
'use client'

import Link from "next/link"

export default function SignupPage () {
  return (
    <>
      <div className="flex min-h-full flex-1 flex-col justify-center py-12 sm:px-6 lg:px-8">
        <div className="mt-10 sm:mx-auto sm:w-full sm:max-w-[480px]">
          <div className="bg-white px-6 py-12 shadow sm:rounded-lg sm:px-12">
            <div>
              <h2 className="text-2xl font-bold leading-9 tracking-tight text-gray-900">Регистрация в Панельку</h2>
              <div>Полноценный доступ к работе с свервисом</div>
            </div>

            <form action="#" method="POST" className="mt-6 space-y-6">
              <div>
                {/* <label htmlFor="email" className="block text-sm font-medium leading-6 text-gray-900">
                  Email address
                </label> */}
                <div className="mt-2">
                  <input
                    name="name"
                    type="text"
                    placeholder="Как вас зовут?"
                    required
                    className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                  />
                </div>
              </div>

              <div>
                <div className="mt-2">
                  <input
                    name="email"
                    type="email"
                    placeholder="Email"
                    required
                    className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                  />
                </div>
              </div>

              <div>
                <div className="mt-2">
                  <input
                    name="phone"
                    type="number"
                    placeholder="Номер телефона"
                    required
                    className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                  />
                </div>
              </div>

              <div>
                <button
                  type="submit"
                  className="flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                >
                  Зарегистироваться
                </button>
              </div>

              <p className="mt-6 text-center text-xs text-gray-400">
                Регистрируясь, вы даете согласие на {' '}
                <a href="#" className="font-semibold leading-6 text-indigo-400 hover:text-indigo-500">обработку персональных данных</a>
                {' '} и принимаете условия {' '}
                <a href="#" className="font-semibold leading-6 text-indigo-400 hover:text-indigo-500">лизензионного соглашения</a>
              </p>

            </form>

            <div>
              <div className="relative mt-10">
                <div aria-hidden="true" className="absolute inset-0 flex items-center">
                  <div className="w-full border-t border-gray-200" />
                </div>
                <div className="relative flex justify-center text-sm font-medium leading-6">
                  <span className="bg-white px-6 text-gray-900">Или зарегистироваться через</span>
                </div>
              </div>

              <div className="mt-6 grid grid-cols-1 gap-4">
                <a
                  href="#"
                  className="flex w-full items-center justify-center gap-3 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus-visible:ring-transparent"
                >
                  <svg viewBox="0 0 24 24" aria-hidden="true" className="h-5 w-5">
                    <path
                      d="M12.0003 4.75C13.7703 4.75 15.3553 5.36002 16.6053 6.54998L20.0303 3.125C17.9502 1.19 15.2353 0 12.0003 0C7.31028 0 3.25527 2.69 1.28027 6.60998L5.27028 9.70498C6.21525 6.86002 8.87028 4.75 12.0003 4.75Z"
                      fill="#EA4335"
                    />
                    <path
                      d="M23.49 12.275C23.49 11.49 23.415 10.73 23.3 10H12V14.51H18.47C18.18 15.99 17.34 17.25 16.08 18.1L19.945 21.1C22.2 19.01 23.49 15.92 23.49 12.275Z"
                      fill="#4285F4"
                    />
                    <path
                      d="M5.26498 14.2949C5.02498 13.5699 4.88501 12.7999 4.88501 11.9999C4.88501 11.1999 5.01998 10.4299 5.26498 9.7049L1.275 6.60986C0.46 8.22986 0 10.0599 0 11.9999C0 13.9399 0.46 15.7699 1.28 17.3899L5.26498 14.2949Z"
                      fill="#FBBC05"
                    />
                    <path
                      d="M12.0004 24.0001C15.2404 24.0001 17.9654 22.935 19.9454 21.095L16.0804 18.095C15.0054 18.82 13.6204 19.245 12.0004 19.245C8.8704 19.245 6.21537 17.135 5.2654 14.29L1.27539 17.385C3.25539 21.31 7.3104 24.0001 12.0004 24.0001Z"
                      fill="#34A853"
                    />
                  </svg>
                  <span className="text-sm font-semibold leading-6">Google</span>
                </a>

                {/* <a
                  href="#"
                  className="flex w-full items-center justify-center gap-3 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus-visible:ring-transparent"
                >
                  <svg fill="currentColor" viewBox="0 0 20 20" aria-hidden="true" className="h-5 w-5 fill-[#24292F]">
                    <path
                      d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z"
                      clipRule="evenodd"
                      fillRule="evenodd"
                    />
                  </svg>
                  <span className="text-sm font-semibold leading-6">GitHub</span>
                </a> */}
              </div>
            </div>
          </div>

          <p className="mt-10 text-center text-sm text-gray-500">
            Уже зарегистированны?{' '}
            <Link href="/signin" className="font-semibold leading-6 text-indigo-600 hover:text-indigo-500">
              Войти в аккаунт
            </Link>
          </p>
        </div>
      </div>
    </>
  )
}


File: D:\ai_now\app\test\page.tsx
import { auth, signIn, signOut } from "../../auth";

function SignIn() {
  return (
    <form
      action={async () => {
        "use server";
        await signIn("github");
      }}
    >
      <p>You are not logged in</p>
      <button type="submit">Sign in with GitHub</button>
    </form>
  );
}

function SignOut({ children }: { children: React.ReactNode }) {
  return (
    <form
      action={async () => {
        "use server";
        await signOut();
      }}
    >
      <p>{children}</p>
      <button type="submit">Sign out</button>
    </form>
  );
}

export default async function Page() {
  let session = await auth();
  let user = session?.user?.email;

  return (
    <section>
      <h1>Home</h1>
      <div>{user ? <SignOut>{`Welcome ${user}`}</SignOut> : <SignIn />}</div>
    </section>
  );
}

